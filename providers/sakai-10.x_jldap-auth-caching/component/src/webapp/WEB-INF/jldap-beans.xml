<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">

<beans>

	<bean id="org.sakaiproject.user.api.UserDirectoryProvider"
		class="edu.amc.sakai.user.JLDAPDirectoryProvider" init-method="init"
		destroy-method="destroy" singleton="true">
		
		<property name="memoryService">
			<ref bean="org.sakaiproject.memory.api.MemoryService"/>
		</property>
		
		<!-- Required. Host name or address of your LDAP server -->
		<property name="ldapHost">
			<value>ldap.university.edu</value>
		</property>
		<property name="ldapPort">
			<value>636</value>
		</property>
<!--
                <property name="secondaryLdapHost">
                        <value>127.0.0.1</value>
                </property>
                <property name="secondaryLdapPort">
                        <value>636</value>
                </property>
-->
		<!-- property name="ldapUser">
			<value>attr=value,attr=value,attr=value</value>
		</property -->
		<!--  property name="ldapPassword">
			<value>usually-set-this-value-in-security-dot-properties</value>
		</property -->
		<property name="secureConnection">
			<value>true</value>
		</property>
		<!-- property name="autoBind">
			<value>false</value>
		</property -->
		<!--  property name="basePath">
			<value>attr=value,attr=value,attr=value</value>
		</property -->
		<!-- property name="followReferrals">
			<value>false</value>
		</property -->
		<!-- property name="operationTimeout">
			<value>5000</value>
		</property -->
		<!-- property name="searchScope">
			<value>2</value>
		</property -->
		<!-- property name="cacheTTL">
			<value>300000</value>
		</property -->
		<property name="caseSensitiveCacheKeys">
			<value>false</value>
		</property>
		<!--  property name="authenticateWithProviderFirst">
			<value>false</value>
		</property -->
		<!-- property name="ldapConnectionManager">
			<bean class="edu.amc.sakai.user.SimpleLdapConnectionManager" />
		</property -->
		<!--  property name="pooling">
			<value>false</value>
		</property -->
		<!--  property name="poolMaxConns">
			<value>10</value>
		</property -->
		<property name="maxObjectsToQueryFor">
		  <value>499</value>
		</property>
		
		<property name="ldapAttributeMapper">
			<ref bean="edu.amc.sakai.user.LdapAttributeMapper" />
		</property>
		
		<!--  property name="attributeMappings">
			<map>
				<entry key="logicalAttrName">
					<value>physicalAttrName</value>
				</entry>
			</map>
		</property -->
		
		<property name="eidValidator">
			<bean class="edu.amc.sakai.user.RegexpBlacklistEidValidator">
				<property name="regexpFlags">
					<bean id="java.util.regex.Pattern.CASE_INSENSITIVE"
						class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean" />
				</property>
				<property name="eidBlacklist">
					<list>
						<value>null</value>
						<value>admin</value>
						<!--value>nobody</value-->
						<!--value>adversary</value-->
					</list>
				</property>
			</bean>
		</property>
		<property name="searchAliases"><value>false</value></property>
		
	</bean>
			
	<bean id="edu.amc.sakai.user.LdapAttributeMapper"
			class="edu.amc.sakai.user.SimpleLdapAttributeMapper"
			init-method="init"
			singleton="true">
			
		<property name="attributeMappings">
			<map>
				<entry key="login"><value>uid</value></entry>         
				<entry key="firstName"><value>givenName</value></entry> 
				<entry key="preferredFirstName"><value>preferredName</value></entry>
				<entry key="lastName"><value>sn</value></entry> 
				<entry key="email"><value>mail</value></entry>  
				<!--entry key="altEmail"><value>altMail</value></entry-->  
				<entry key="groupMembership"><value>groupMembership</value></entry>   
				<!--entry key="jpegPhoto"><value>jpegPhoto</value></entry-->   
			</map>
		</property>
		
		<!-- Several options for calculating Sakai user types based
		on LDAP attributes. Defaults to an instance of EmptyStringUserTypeMapper -->
		<property name="userTypeMapper">
			<!-- Select one of the following beans -->
			<ref bean="edu.amc.sakai.user.EmptyStringUserTypeMapper" />
			<!-- ref bean="edu.amc.sakai.user.EntryAttributeToUserTypeMapper" /-->
			<!-- ref bean="edu.amc.sakai.user.EntryContainerRdnToUserTypeMapper" /-->
			<!-- ref bean="edu.amc.sakai.user.StringUserTypeMapper" /-->
		</property>
		
	</bean>
	
	
	<!-- /// Begin Sample UserTypeMapper Beans /// -->
	
	<!-- Will usually only need at most one of the following UserTypeMapper
	beans. Three "standard" options shown here for documentation purposes. The 
	"active" bean will be selected by a bean reference in the userTypeMapper 
	property definition above. -->
	
	<!-- EmptyStringUserTypeMapper assigns gives all users an
	empty string as their Sakai "type" -->
	<bean id="edu.amc.sakai.user.EmptyStringUserTypeMapper"
		class="edu.amc.sakai.user.EmptyStringUserTypeMapper"
		singleton="true" />
	
	<!-- StringUserTypeMapper assigns a configurable String to all
	users as their Sakai "type". -->
	<bean id="edu.amc.sakai.user.StringUserTypeMapper"
		class="edu.amc.sakai.user.StringUserTypeMapper"
		singleton="true">
		
		<!--  property name="userType">
			<value>Registered</value>
		</property -->
		
	</bean>
		
	<!-- EntryAttributeToUserTypeMapper calculates Sakai user
		types by simply passing attribute values through a map with
		configurable "miss" behavior. -->
	<bean id="edu.amc.sakai.user.EntryAttributeToUserTypeMapper"
		class="edu.amc.sakai.user.EntryAttributeToUserTypeMapper"
		singleton="true">
		
		<!-- Optional. If not present or empty, behavior is
		determined by the value of returnLiteralAttributeValueIfNoMapping
		(see below). -->
		<!-- property name="attributeValueToSakaiUserTypeMap">
			<map>
				<entry key="faculty"><value>faculty</value></entry> 
				<entry key="students"><value>student</value></entry> 
			</map>
		</property -->
				
		<!-- Required. The logical name of the LDAP attribute which
		defines Sakai users' types. Value should be a key into the 
		attribute mappings associated with this LdapAttributeMapper 
		instance. -->
		<property name="logicalAttributeName">
			<value>groupMembership</value>
		</property>
				
		<!-- Optional. Defaults to false -->
		<!--  property name="returnLiteralAttributeValueIfNoMapping">
			<value>false</value>
		</property -->
				
		<!-- Optional. Only considered if returnLiteralAttributeValueIfNoMapping
			is false. Defaults to null. -->
		<!--  property name="defaultSakaiUserType">
			<null />
		</property -->
		
	</bean>
	
	<!-- EntryContainerRdnToUserTypeMapper calculates Sakai user
		types by filtering a user entry's most-local RDN through the
		assigned map. -->
	<bean id="edu.amc.sakai.user.EntryContainerRdnToUserTypeMapper"
		class="edu.amc.sakai.user.EntryContainerRdnToUserTypeMapper"
		singleton="true">
		
		<!-- Optional. Maps between container RDN values and Sakai user types -->
		<!-- property name="rdnToSakaiUserTypeMap">
			<map>
				<entry key="facultyStaff"><value>faculty</value></entry> 
				<entry key="students"><value>student</value></entry> 
			</map>
		</property -->

		<!-- Optional. Defaults to false.  -->
		<!-- property name="recurseRdnIfNoMapping">
			<value>false</value>
		</property -->
				
		<!-- Optional. Defaults to false.  -->
		<!-- property name="returnLiteralRdnValueIfNoMapping">
			<value>false</value>
		</property -->
		
	</bean>
		
	<!-- /// End Sample UserTypeMapper Beans /// -->
	
</beans>
