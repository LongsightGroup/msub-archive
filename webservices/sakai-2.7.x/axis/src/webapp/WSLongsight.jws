import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.Map;
import java.util.HashMap;
import java.util.List;
import java.util.Iterator;
import java.util.Set;
import java.util.Vector;
import java.util.Collection;
import java.text.SimpleDateFormat;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.commons.codec.binary.Base64;
import org.sakaiproject.tool.api.Session;
import org.sakaiproject.tool.cover.SessionManager;
import org.sakaiproject.exception.IdUnusedException;

import org.sakaiproject.content.api.ContentResourceEdit;
import org.sakaiproject.content.api.ResourceType;
import org.sakaiproject.util.Validator;

import org.sakaiproject.time.cover.TimeService;
import org.sakaiproject.time.api.Time;
import org.sakaiproject.time.api.TimeBreakdown;
import org.sakaiproject.time.api.TimeRange;
import org.sakaiproject.calendar.cover.CalendarService;
import org.sakaiproject.calendar.cover.CalendarImporterService;
import org.sakaiproject.calendar.api.Calendar;
import org.sakaiproject.calendar.api.CalendarEdit;
import org.sakaiproject.calendar.api.CalendarEvent;
import org.sakaiproject.calendar.api.CalendarEventEdit;
import org.sakaiproject.calendar.api.RecurrenceRule;

import org.sakaiproject.site.cover.SiteService;
import org.sakaiproject.site.api.Site;
import org.sakaiproject.site.api.SitePage;
import org.sakaiproject.site.api.SiteService.SelectionType;
import org.sakaiproject.site.api.SiteService.SortType;
import org.sakaiproject.authz.api.Member;
import org.sakaiproject.authz.api.Role;
import org.sakaiproject.user.api.UserDirectoryService;
import org.sakaiproject.user.api.User;
import org.sakaiproject.user.api.UserEdit;
import org.sakaiproject.site.api.Group;
import org.sakaiproject.tool.api.Tool;
import org.sakaiproject.site.api.ToolConfiguration;
import org.sakaiproject.tool.cover.ToolManager;
import org.sakaiproject.archive.api.ArchiveService;
import org.sakaiproject.content.api.ContentCollection;
import org.sakaiproject.content.api.ContentCollectionEdit;
import org.sakaiproject.content.cover.ContentHostingService;
import org.sakaiproject.entity.api.Entity;
import org.sakaiproject.entity.api.EntityPropertyNotDefinedException;
import org.sakaiproject.entity.api.EntityPropertyTypeException;
import org.sakaiproject.authz.cover.AuthzGroupService;
import org.sakaiproject.authz.api.AuthzGroup;
import org.sakaiproject.authz.api.SecurityService;
import org.sakaiproject.event.api.NotificationService;

import org.sakaiproject.component.section.sakai.CourseImpl;
import org.sakaiproject.component.section.sakai.CourseSectionImpl;

import org.sakaiproject.entity.api.ResourceProperties;
import org.sakaiproject.entity.api.ResourcePropertiesEdit;

import org.sakaiproject.component.cover.ComponentManager;
import org.sakaiproject.component.api.ServerConfigurationService;

import org.apache.axis.AxisFault;

import org.sakaiproject.user.api.Preferences;
import org.sakaiproject.user.cover.PreferencesService;

import org.sakaiproject.util.Xml;
import org.w3c.dom.Document;
import org.w3c.dom.Node;

import org.sakaiproject.api.app.messageforums.cover.SynopticMsgcntrManagerCover;
import org.sakaiproject.api.app.messageforums.SynopticMsgcntrManager;
import org.sakaiproject.api.app.messageforums.SynopticMsgcntrItem;

import org.sakaiproject.service.gradebook.shared.GradebookService;
import org.sakaiproject.tool.gradebook.Gradebook;
import org.sakaiproject.service.gradebook.shared.Assignment;

public class WSLongsight{

private static final Log LOG = LogFactory.getLog(WSLongsight.class);

private ContentHostingService contentHostingService;

    /** Injects ContentHostingService into this service **/
    public void setContentHostingService(ContentHostingService chs) {
    this.contentHostingService = chs;
    }

private SecurityService securityService;
private ServerConfigurationService serverConfigurationService;
private UserDirectoryService userDirectoryService;

public WSLongsight() {
    	userDirectoryService = (UserDirectoryService) ComponentManager.get(UserDirectoryService.class.getName());
	securityService = (SecurityService) ComponentManager.get(SecurityService.class.getName());
	serverConfigurationService = (ServerConfigurationService) ComponentManager.get(ServerConfigurationService.class.getName());
}

/** Name for the event of removing a calendar event */
public static final String EVENT_REMOVE_CALENDAR = "calendar.delete";


private Session establishSession(String id) throws AxisFault 
{
	Session s = SessionManager.getSession(id);
	
	if (s == null)
	{
		throw new AxisFault("Session "+id+" is not active");
	}
	s.setActive();
	SessionManager.setCurrentSession(s);
	return s;
}

public String checkSession(String id) {
	Session s = SessionManager.getSession(id);
	if (s == null)
	{
		return "null";
	}
	else
	{
		return id;
	}
}





/** LONGSIGHT SITE CREATION WEB SERVICES **/



public String longsightSiteExists(String sessionid, String siteid) throws AxisFault
{
	Session session = establishSession(sessionid);
	try {
		Boolean siteExist = SiteService.siteExists(siteid);
		return siteExist.toString();
	}
	catch(Exception ex) {
	}
	return "false";
}

public String longsightGetTitle(String sessionid, String siteid) throws AxisFault
{
    Session session = establishSession(sessionid);

    try {
        Site site = SiteService.getSite(siteid);
		return site.getTitle();
	}
	catch(Exception e) {
		return e.getClass().getName() + " : " + e.getMessage();
	}

}

public String longsightGetIdFromTitle(String sessionid, String sitetitle) throws AxisFault
{
    Session session = establishSession(sessionid);

    List<Site> sites = SiteService.getSites(org.sakaiproject.site.api.SiteService.SelectionType.ANY,
      null, sitetitle, null, org.sakaiproject.site.api.SiteService.SortType.ID_DESC, null);
    if (sites.size() == 1) {
      return sites.get(0).getId();
    } else {
      return "error: could not find the site, or I found too many with that name";
    }
}



public String longsightSetTitle(String sessionid, String siteid, String title) throws AxisFault
{
    Session session = establishSession(sessionid);

    try {
        Site site = SiteService.getSite(siteid);
        site.setTitle(title);
        
        SiteService.save(site);
        return site.getTitle();
    }
    catch(Exception e) {
        return e.getClass().getName() + " : " + e.getMessage();
    }

}


public String longsightAddPropertiesToSite(String sessionid, String siteid, String instructorEmail, String instructorName, String currentTermDisplayString, String termeid) throws AxisFault
{
  Session session = establishSession(sessionid);

  try {
    Site site = SiteService.getSite(siteid);
    ResourcePropertiesEdit sitePropertiesEdit = site.getPropertiesEdit();
        //sitePropertiesEdit.addProperty(INDIVIDUAL_COURSE, individualSiteId);
        sitePropertiesEdit.addProperty("contact-email", instructorEmail);
        sitePropertiesEdit.addProperty("contact-name", instructorName);
        sitePropertiesEdit.addProperty("term", currentTermDisplayString);
        sitePropertiesEdit.addProperty("term_eid", termeid);

    SiteService.save(site);
  }
  catch (Exception e) {
    return e.getClass().getName() + " : " + e.getMessage();
  }
  return "success";
}

public String longsightCreateFolder(String sessionid, String siteId, String folderName, String folderDescription, String userId) {
    try {
            Session session = establishSession(sessionid);
            String homeCollection = contentHostingService.getSiteCollection(siteId);

            ContentCollectionEdit collection = contentHostingService.addCollection(homeCollection + folderName);

            final ResourcePropertiesEdit resourceProperties = collection.getPropertiesEdit();

            resourceProperties.addProperty( ResourceProperties.PROP_DISPLAY_NAME, folderName);
            resourceProperties.addProperty( ResourceProperties.PROP_DESCRIPTION, folderDescription);
            resourceProperties.addProperty( ResourceProperties.PROP_CREATOR, userId);

            contentHostingService.commitCollection(collection);
    }
    catch (Exception e) {
            // catches IdUnusedException, TypeException
            // InconsistentException,  IdUsedException
            // IdInvalidException, PermissionException
            // InUseException

            LOG.error(e.getMessage() + " while attempting to create Presentations folder: "
                                     + " for site: " + siteId + ". NOT CREATED... " + e.getMessage(), e);
            e.printStackTrace();
            return "error: " + e.getMessage();
    }
    return "success";

}

public String longsightCreateFolder(String sessionid, String siteId, String folderName, String folderPath, String folderDescription, String userId) {
    try {
            Session session = establishSession(sessionid);
            String homeCollection = contentHostingService.getSiteCollection(siteId);

            ContentCollectionEdit collection = contentHostingService.addCollection(homeCollection + folderPath + folderName);

            final ResourcePropertiesEdit resourceProperties = collection.getPropertiesEdit();

            resourceProperties.addProperty( ResourceProperties.PROP_DISPLAY_NAME, folderName);
            resourceProperties.addProperty( ResourceProperties.PROP_DESCRIPTION, folderDescription);
            resourceProperties.addProperty( ResourceProperties.PROP_CREATOR, userId);

            contentHostingService.commitCollection(collection);
    }
    catch (Exception e) {
            // catches IdUnusedException, TypeException
            // InconsistentException,  IdUsedException
            // IdInvalidException, PermissionException
            // InUseException

            LOG.error(e.getMessage() + " while attempting to create "+folderName+" folder: "
                                     + " for site: " + siteId + ". NOT CREATED... " + e.getMessage(), e);
            e.printStackTrace();
            return "error: " + e.getMessage();
    }
    return "success";

}


public String longsightRemoveAllResources(String sessionid, String siteId) {
    try {
            Session session = establishSession(sessionid);

            String homeCollection = contentHostingService.getSiteCollection(siteId);
            contentHostingService.removeCollection(homeCollection);
    }
    catch (Exception e) {
        e.printStackTrace();
        return "error: " + e.getMessage();
    }
    return "success";

}

public String longsightRemoveFolder(String sessionid, String siteId, String folderName, String folderPath) {
    try {
            Session session = establishSession(sessionid);

            String homeCollection = contentHostingService.getSiteCollection(siteId);
            contentHostingService.removeCollection(homeCollection+folderPath+folderName);
    }
    catch (Exception e) {
       e.printStackTrace();
       return "error: " + e.getMessage();
    }
    return "sucess";

}

public boolean longsightAddResourceToFolder(String sessionid, String siteid, String foldername, String basename, String extension, String encodedstring, String contenttype, String filesize) throws AxisFault {
	Session session = establishSession(sessionid); 

	//System.out.println("site: " + siteid + "; base: " + basename + "; extension: " + extension + "; contentype: " + contenttype + "; filesize: " + filesize);
	try
	{
		//System.out.println(encodedstring);
		//String resourcestring = new String(Base64.decodeBase64(encodedstring.getBytes("UTF-8")));
		//InputStream is = new ByteArrayInputStream( resourcestring.getBytes() );

		InputStream is = new ByteArrayInputStream(Base64.decodeBase64(encodedstring.getBytes()));

        //String homeCollection = contentHostingService.getSiteCollection(siteid);
		//System.out.println(homeCollection);

		final int idVariationLimit = 100; 

		// Method: create a resource, fill in its properties,
	    // commit to officially save it
		ContentResourceEdit cr = null;

        // create the initial object
        cr = contentHostingService.addResource(foldername, basename, extension, idVariationLimit);

		// Add the actual contents of the file and content type
        cr.setContent(is);
        cr.setContentType(contenttype);

		// fill up its properties
        //final ResourcePropertiesEdit resourceProperties = cr.getPropertiesEdit();
		ResourcePropertiesEdit resourceProperties = contentHostingService.newResourceProperties();

        resourceProperties.addProperty(ResourceProperties.PROP_IS_COLLECTION, Boolean.FALSE.toString());
        resourceProperties.addProperty(ResourceProperties.PROP_DISPLAY_NAME, basename + "." + extension);
        resourceProperties.addProperty(ResourceProperties.PROP_DESCRIPTION, basename + "." + extension);

        final SimpleDateFormat formatter = new SimpleDateFormat("yyyyMMddHHmmssSSS");
        formatter.setTimeZone(TimeService.getLocalTimeZone());

        // resourceProperties.addProperty(ResourceProperties.PROP_CREATION_DATE, formatter .format(displayDate));
        resourceProperties.addProperty(ResourceProperties.PROP_CONTENT_LENGTH, filesize);

		// now to commit the changes
        contentHostingService.commitResource(cr, NotificationService.NOTI_NONE);

		// add entry for event tracking
        //final Event event = EventTrackingService.newEvent(EVENT_ADD_PODCAST, getEventMessage(cr.getReference()), true, NotificationService.NOTI_NONE);
        //EventTrackingService.post(event);
        return true;
		
	}
    catch (IdUnusedException e) {
            LOG.error("IdUnusedException trying to add a resource to folder in Resources", e);
	}
	catch (Exception e) 
	{
		e.printStackTrace();
		LOG.error("Error when adding resource to folder", e);
	}
	return false;
}


public String longsightAddNewToolToPageIfNotExists( String sessionid, String siteid, String pagetitle, String tooltitle, String toolid, String oldToolId) throws AxisFault
{
    Session session = establishSession(sessionid);

    try {
        boolean toolExists = false;
        Site siteEdit = SiteService.getSite(siteid);
        List pageEdits = siteEdit.getPages();

        for (Iterator i = pageEdits.iterator(); i.hasNext();)
        {
            SitePage pageEdit = (SitePage) i.next();
            
            if (pageEdit.getTitle().equals(pagetitle))
            {
                List toolEdits = pageEdit.getTools();

                for (Iterator j = toolEdits.iterator(); j.hasNext();)
                {
                    ToolConfiguration tool = (ToolConfiguration) j.next();
                    Tool t = tool.getTool();

                    if (t.getId().equals(oldToolId))
                    {
                        toolExists = true;
                        System.out.println(oldToolId + " already exists! Skipping add!");
                        return "exists";
                    }
                 }
                 
                 ToolConfiguration toolTwo = pageEdit.addTool();
                 Tool tt = toolTwo.getTool();
                 
                toolTwo.setTool(toolid, ToolManager.getTool(toolid));
                toolTwo.setTitle(tooltitle);
            }

        }
        
        SiteService.save(siteEdit);
        
        if (!toolExists) {
            return "success";
        }
        else {
            return "no tool";
        }

    }
    catch (Exception e) {
        return e.getClass().getName() + " : " + e.getMessage();

    }

}


public String longsightRemoveToolFromPage( String sessionid, String siteid, String pagetitle, String toolid) throws AxisFault
{
    Session session = establishSession(sessionid);
    boolean removedTool = false;

    try {
        Site siteEdit = SiteService.getSite(siteid);
        List pageEdits = siteEdit.getPages();

        for (Iterator i = pageEdits.iterator(); i.hasNext();)
        {
            SitePage pageEdit = (SitePage) i.next();
            
            if (pageEdit.getTitle().equals(pagetitle))
            {
                List toolEdits = pageEdit.getTools();

                for (Iterator j = toolEdits.iterator(); j.hasNext();)
                {
                    ToolConfiguration tool = (ToolConfiguration) j.next();
                    Tool t = tool.getTool();

                    boolean pleaseRemove = false;

                    if (t.getId().equals(toolid))
                    {
                        pleaseRemove = true;
                    }

                    if (pleaseRemove) {
                        pageEdit.removeTool(tool);
                        removedTool = true;
                    }
                    break;
                }
            }

        }
        SiteService.save(siteEdit);
        
        if (removedTool) {
            return "success";
        }
        else {
            return "fail";
        }
    }
    catch (Exception e) {
        return e.getClass().getName() + " : " + e.getMessage();
    }

}


public String longsightDoesPageExist( String sessionid, String siteid, String pagetitle) throws AxisFault
{
    Session session = establishSession(sessionid);
    boolean pageExist = false;

    try {
        Site siteEdit = SiteService.getSite(siteid);
        List pageEdits = siteEdit.getPages();

        for (Iterator i = pageEdits.iterator(); i.hasNext();)
        {
            SitePage pageEdit = (SitePage) i.next();

            if (pageEdit.getTitle().equals(pagetitle))
            {
                pageExist = true;
            }
        }
        return pageExist + "";
    }
    catch (Exception e) {
        return e.getClass().getName() + " : " + e.getMessage();
    }

}

public String longsightRenamePage( String sessionid, String siteid, String pagetitle, String newtitle) throws AxisFault
{
    Session session = establishSession(sessionid);

    try {
        Site siteEdit = SiteService.getSite(siteid);
        List pageEdits = siteEdit.getPages();

        for (Iterator i = pageEdits.iterator(); i.hasNext();)
        {
            SitePage pageEdit = (SitePage) i.next();

            if (pageEdit.getTitle().equals(pagetitle))
            {
                pageEdit.setTitle(newtitle);
            }
        }

        SiteService.save(siteEdit);
        return "sucess";
    }
    catch (Exception e) {
        return e.getClass().getName() + " : " + e.getMessage();
    }

}


public String longsightRemovePageFromSite( String sessionid, String siteid, String toolId) throws AxisFault
{
    Session session = establishSession(sessionid);

    try {
        Site siteEdit = null;
        siteEdit = SiteService.getSite(siteid);

        ToolConfiguration tool = siteEdit.getToolForCommonId(toolId);
        SitePage sitePage = tool.getContainingPage();
        
        sitePage.removeTool(tool);
        siteEdit.removePage(sitePage);

        SiteService.save(siteEdit);
    }
    catch (Exception e) 
    {
        return e.getClass().getName() + " : " + e.getMessage();
    }
    return "success";
}


/** LONGSIGHT USER MANAGEMENT WEB SERVICES **/

public String longsightGetUserType( String sessionid, String userid ) throws AxisFault
{
	Session session = establishSession(sessionid);

	try {
		User user = userDirectoryService.getUserByEid(userid);
		return user.getType();
	}
	catch(Exception e) {
		return "nouser";
	}

}

public String longsightAddNewUser(String sessionid, String eid, String firstname, String lastname, String email, String type, String password) throws AxisFault
{
    Session session = establishSession(sessionid);

    if (!securityService.isSuperUser())
    {
        LOG.warn("NonSuperUser trying to add accounts: " + session.getUserId());
        throw new AxisFault("NonSuperUser trying to add accounts: " + session.getUserId());
    }
    try {

        User addeduser = null;
        addeduser = userDirectoryService.addUser(null, eid, firstname, lastname, email, password, type, null);

    }
    catch (Exception e) {
        LOG.warn("WS addNewUser(): " + e.getClass().getName() + " : " + e.getMessage());
        return e.getClass().getName() + " : " + e.getMessage();
    }
    return "success";
}


public boolean longsightUserExists( String sessionid, String eid) throws AxisFault
{
	Session session = establishSession(sessionid);

	try {
		UserEdit userEdit = null;
		String userid = userDirectoryService.getUserByEid(eid).getId();

		if (userid != null) {
			return true;
		}
		else {
			return false;
		}
	}
	catch (Exception e) {  
	    return false;
	}

}


/** LONGSIGHT SITE MEMBERSHIP/STATUS WEB SERVICES **/


public String longsightGetMembersForSite(String sessionid, String siteid) throws AxisFault
{
	Session session = establishSession(sessionid);
	String instruct = "";

	try {
		Site site = SiteService.getSite(siteid);
		Set users = site.getUsersHasRole("Instructor");

		for (Iterator i = users.iterator(); i.hasNext();)
		{
		    String id = (String)i.next();
			String eid= userDirectoryService.getUser(id).getEid();
			instruct += eid + ",";
		}
	}
	catch(Exception ex) {
	}
	return instruct;
}

public String longsightGetStudentsForSite(String sessionid, String siteid) throws AxisFault
{
    Session session = establishSession(sessionid);
    String instruct = "";

    try {
        Site site = SiteService.getSite(siteid);
        Set users = site.getUsersHasRole("Student");

        for (Iterator i = users.iterator(); i.hasNext();)
        {
            String id = (String)i.next();
            String eid= userDirectoryService.getUser(id).getEid();
            String sortName = userDirectoryService.getUser(id).getSortName();
            instruct += id + ":" + eid + ":" + sortName + "|";
        }

    }
    catch(Exception ex) {
    }
    return instruct;
}

public boolean longsightIsMember(String sessionid, String siteid, String eid) throws AxisFault
{
    Session session = establishSession(sessionid);
    
    try {
        Site site = SiteService.getSite(siteid);
        String userid = userDirectoryService.getUserByEid(eid).getId();
        Member member = site.getMember(userid);
        String memberUserId =  member.getUserId();

        if (memberUserId != null && memberUserId.toLowerCase().equals(userid.toLowerCase())) {
            return true;
        }
        else {
            return false;
        }
    }
    catch(Exception ex) {
        return false;
    }
    
}

public boolean longsightIsMemberById(String sessionid, String siteid, String id) throws AxisFault
{
    Session session = establishSession(sessionid);

    try {
        Site site = SiteService.getSite(siteid);
        String userid = userDirectoryService.getUser(id).getId();
        Member member = site.getMember(userid);
        String memberUserId =  member.getUserId();

        if (memberUserId != null && memberUserId.toLowerCase().equals(userid.toLowerCase())) {
            return true;
        }
        else {
            return false;
        }
    }
    catch(Exception ex) {
        return false;
    }

}

public boolean longsightIsStudentOfSite(String sessionid, String siteid, String eid) throws AxisFault
{
    Session session = establishSession(sessionid);
    
    try {
        Site site = SiteService.getSite(siteid);
        String userid = userDirectoryService.getUserByEid(eid).getId();

        return site.hasRole(userid, "Student");
    }
    catch(Exception ex) {
        return false;
    }

}

public boolean longsightIsInstructorOfSite(String sessionid, String siteid, String eid) throws AxisFault
{
    Session session = establishSession(sessionid);
    
    try {
        Site site = SiteService.getSite(siteid);
		String userid = userDirectoryService.getUserByEid(eid).getId();

		return site.hasRole(userid, "Instructor");
	}
	catch(Exception ex) {
		return false;
	}

}


public String longsightAllowFunctionForRole( String sessionid, String siteid, String roleid, String functionname) throws AxisFault
{
	Session session = establishSession(sessionid);

	try {
        Site site = SiteService.getSite(siteid);
		Role role = site.getRole(roleid);

		role.allowFunction(functionname);
        SiteService.save(site);
	}
	catch (Exception e) {  
	    return e.getClass().getName() + " : " + e.getMessage();
	}
	return "success";
	
}


public String longsightDisallowFunctionForRole( String sessionid, String siteid, String roleid, String functionname) throws AxisFault
{
	Session session = establishSession(sessionid);

	try {
        Site site = SiteService.getSite(siteid);
		Role role = site.getRole(roleid);

		role.disallowFunction(functionname);
        SiteService.save(site);
	}
	catch (Exception e) {  
	    return e.getClass().getName() + " : " + e.getMessage();
	}
	return "success";

}


public String longsightRemoveMemberFromSite(String sessionid, String siteid, String eid) throws AxisFault
{
	Session session = establishSession(sessionid);

	try {
		Site site = SiteService.getSite(siteid);
		String userid = userDirectoryService.getUserByEid(eid).getId();

		site.removeMember(userid);
		SiteService.save(site);
	}
	catch (Exception e) {
		return e.getClass().getName() + " : " + e.getMessage();
	}
	return "success";
}



public String longsightAddGroupToSite( String sessionId, String siteId, String groupTitle, String groupDesc, String groupCategory )
    throws AxisFault
{
    Session session = establishSession(sessionId);

    try
    {
        Site site = SiteService.getSite(siteId);
        Group group = site.addGroup();

        group.setTitle(groupTitle);
        group.setDescription(groupDesc);

        System.out.println("New section: " + groupTitle + "; descr: " + groupDesc + "; cate: " + groupCategory);

        ResourceProperties props = group.getProperties();

        props.addProperty("group_prop_wsetup_created", Boolean.TRUE.toString());
        props.addProperty("sections_category", groupCategory);
        props.addProperty(CourseImpl.EXTERNALLY_MAINTAINED, Boolean.toString(false));
        props.addProperty(CourseImpl.STUDENT_REGISTRATION_ALLOWED, Boolean.toString(false));
        props.addProperty(CourseImpl.STUDENT_SWITCHING_ALLOWED, Boolean.toString(false));

        SiteService.save(site);

        return group.getId();
    }
    catch (Exception e)
    {
        throw new AxisFault(e.toString());
    }

}



/** CALENDAR WEB SERVICES **/



public String longsightAddCalendarEvent(String sessionid, String siteid, String importstring) throws AxisFault {

    //setup source and target calendar strings
    String calId = "/calendar/calendar/"+ siteid +"/main"; 
    CalendarEdit calendar = null;

    Session session = establishSession(sessionid); 
        try
        {
            calendar = CalendarService.editCalendar(calId); 
            InputStream is = new ByteArrayInputStream( importstring.getBytes() );

            Map columnMap = CalendarImporterService.getDefaultColumnMap(CalendarImporterService.CSV_IMPORT);
            String[] addFieldsCalendarArray = null;

            List eventsList = CalendarImporterService.doImport(
                CalendarImporterService.CSV_IMPORT,
                is,
                columnMap,
                addFieldsCalendarArray);

            for (Iterator i = eventsList.iterator(); i.hasNext();) { 

                CalendarEvent cEvent = (CalendarEvent) i.next(); 
                System.out.println("new event: " + cEvent.getDisplayName());
                CalendarEventEdit cedit = calendar.addEvent(); 

                cedit.setRange(cEvent.getRange()); 
                cedit.setDisplayName(cEvent.getDisplayName()); 
                cedit.setDescription(cEvent.getDescription()); 
                cedit.setType(cEvent.getType()); 
                cedit.setLocation(cEvent.getLocation()); 
                cedit.setDescriptionFormatted(cEvent.getDescriptionFormatted()); 
                cedit.setRecurrenceRule(cEvent.getRecurrenceRule()); 

                calendar.commitEvent(cedit); 
            }

            CalendarService.commitCalendar(calendar); 
				
            return "success";
        }
        catch (IdUnusedException e)
        {
            LOG.warn("Unused calendar");
            return "unused";
        }
        catch (Exception e)
        {
            if (calendar != null) {
                CalendarService.cancelCalendar(calendar); 
            }
            LOG.warn("Calendar import failed", e);
            return "fail";
        }

}


/**
 * Search a course site for an event with a particular title
 *
 * @param sessionid		the id of a valid session
 * @param siteId		the id of the site you want to search
 * @param searchString	the event title you want to search for, empty string to get everything
 * @return 				empty string for non found, event details in json string, error
 * @throws AxisFault
 *
 */
public String searchCalendarEvent(String sessionid, String siteId, String searchString) throws AxisFault {
	Session session = establishSession(sessionid);
	
	String searchResults = "";
	
	try {
		String calId = "/calendar/calendar/"+siteId+"/main";
		Calendar calendar = CalendarService.getCalendar(calId); 
		//get all the events on this site's calendar
		List<CalendarEvent> eventList = calendar.getEvents(null, null);
		
        searchResults += "{\"events\": [ ";

		for (CalendarEvent event : eventList) {
			if ("".equals(searchString) || event.getDisplayName().equals(searchString) ) {
                if (searchResults.equals("{\"events\": [ ")) {
                    // this is the first record
                } else {
                    // not the first record, so add a comma in fromt
                    searchResults += ", ";
                }

				searchResults += "{ \"id\": \""+event.getId()+"\", \"title\": \""+event.getDisplayName()+"\", \"range\": \""+event.getRange().toStringHR()+"\", \"type\": \""+event.getType();
				searchResults += "\", \"location\": \""+event.getLocation()+"\", \"frequency\": \""+event.getRecurrenceRule().getFrequencyDescription()+"\", \"interval\": \"";
				searchResults += event.getRecurrenceRule().getInterval()+"\", \"until\": \""+event.getRecurrenceRule().getUntil().toStringLocalFull()+"\"}";
			}
		}

        searchResults += "]}";
		
	} catch (Exception e) {
	    LOG.error("WS searchCalendarEvent(): error " + e.getClass().getName() + " : " + e.getMessage());
        return e.getClass().getName() + " : " + e.getMessage();	
	}

	return searchResults;
}

/** 
 * Create a calendar event for a specfied site
 *
 * @param	sessionid		the id of a valid session
 * @param	siteId			the id of the site where you want to create a new calendar event
 * @param	eventTitle		The title of this new calendar event
 * @param	startdate		The startdate for the range - may not be the actual start date
 * @param	enddate			The enddate for the range - may not be the actual last class
 * @param	starttime		The start time
 * @param	endtime			The end time
 * @param	daysofweek		The days of the week this class meets on: mtwrf
 * @param	location		The meeting location
 * @return		        	success or exception
 * @throws	AxisFault		
 *
 */
public String createCalendarEvent(String sessionid, String siteId, String eventTitle, String startdate, String enddate, String starttime, String endtime, String daysofweek, String location) throws AxisFault { 

	Session session = establishSession(sessionid); 
		
	//setup source and target calendar strings
	String calId = "/calendar/calendar/"+siteId+"/main";
	LOG.error("calendar: "+calId);
	
	try { 
		//get calendar
		Calendar calendar = CalendarService.getCalendar(calId); 
		
		String startdateArr[] = startdate.split("-");
		String enddateArr[] = enddate.split("-");
		String starttimeArr[] = starttime.split(":");
		String endtimeArr[] = endtime.split(":");
		
		// Create the time range object, needed for adding the event to the calendar
		Time startTimeObj = TimeService.newTimeLocal(
		    Integer.parseInt(startdateArr[0]),
		    Integer.parseInt(startdateArr[1]),
		    Integer.parseInt(startdateArr[2]),
		    Integer.parseInt(starttimeArr[0]),
		    Integer.parseInt(starttimeArr[1]),
		    Integer.parseInt(starttimeArr[2]),
		    000);
		Time endTimeObj = TimeService.newTimeLocal(
			Integer.parseInt(startdateArr[0]),
		    Integer.parseInt(startdateArr[1]),
		    Integer.parseInt(startdateArr[2]),
		    Integer.parseInt(endtimeArr[0]),
		    Integer.parseInt(endtimeArr[1]),
		    Integer.parseInt(endtimeArr[2]),
			000);
		
		Time untilTimeObj = TimeService.newTimeLocal(
			Integer.parseInt(enddateArr[0]),
		    Integer.parseInt(enddateArr[1]),
		    Integer.parseInt(enddateArr[2]),
		    Integer.parseInt(endtimeArr[0]),
		    Integer.parseInt(endtimeArr[1]),
		    Integer.parseInt(endtimeArr[2]),
			000);
		
		HashMap dayMapping = new HashMap();
		dayMapping.put("m", "Mon");
		dayMapping.put("t", "Tue");
		dayMapping.put("w", "Wed");
		dayMapping.put("r", "Thu");
		dayMapping.put("f", "Fri");
		//dayMapping.put("s", "Sat"); // not sure what these would be in Banner
		//dayMapping.put("s", "Sun");
		
		String daysofweekArr[] = daysofweek.split("");
		for (String d : daysofweekArr) {
			
			if (!"".equals(d)) {
				
				//LOG.error("day: "+d);
				String tmp = startTimeObj.toStringRFC822Local();
				String startday = tmp.substring(0, tmp.indexOf(","));
				
				while (!startday.equals( (String) dayMapping.get(d) )) {
					// we keep adding days to StartTimeObj until we get to the REAL start date.
					long oneDay = 86400000L;
					startTimeObj = TimeService.newTime(startTimeObj.getTime()+oneDay);
					tmp = startTimeObj.toStringRFC822Local();
					startday = tmp.substring(0, tmp.indexOf(","));
				}
				
				//LOG.error(startday);
				
				TimeBreakdown tbd = startTimeObj.breakdownLocal();
				
				// set the endtime to the new day too.
				endTimeObj = TimeService.newTimeLocal(
					tbd.getYear(),
				    tbd.getMonth(),
				    tbd.getDay(),
				    Integer.parseInt(endtimeArr[0]),
				    Integer.parseInt(endtimeArr[1]),
				    Integer.parseInt(endtimeArr[2]),
					000);
				
				TimeRange range = TimeService.newTimeRange(startTimeObj, endTimeObj, true, true);
				
				CalendarEventEdit cedit = calendar.addEvent(); 
				cedit.setRange(range); 
				cedit.setDisplayName(eventTitle); 
				cedit.setDescription(eventTitle);
				cedit.setDescriptionFormatted(eventTitle);
				cedit.setType("Class session");
				cedit.setLocation(location); 
				RecurrenceRule recurr = CalendarService.newRecurrence("week", 1, untilTimeObj);
				cedit.setRecurrenceRule(recurr); 

				calendar.commitEvent(cedit);
				
			}
			
		}
		
	} catch (Exception e) { 
		LOG.error("WS createCalendarEvent(): error " + e.getClass().getName() + " : " + e.getMessage()); 
		return e.getClass().getName() + " : " + e.getMessage(); 
	} 
	
	
	return "success"; 
}

/**
 * Remove a calendar event
 *
 * @param  sessionid   the id of a valid session
 * @param  siteId      the id of the site you want to update
 * @param  eventId     the id of the calendar event you want to update
 * @return             success or failure
 * @throws AxisFault
 *
 */
public String removeCalendarEvent(String sessionid, String siteid, String eventid) throws AxisFault {
    Session session = establishSession(sessionid);
     
    try {
        String calId = "/calendar/calendar/"+siteid+"/main";
		Calendar calendar = CalendarService.getCalendar(calId); 

        CalendarEventEdit calEventEdit = calendar.getEditEvent(eventid, EVENT_REMOVE_CALENDAR);

        calendar.removeEvent(calEventEdit);        

    } catch (Exception e) {
		LOG.error("WS updateCalendarEvent(): error " + e.getClass().getName() + " : " + e.getMessage()); 
		return e.getClass().getName() + " : " + e.getMessage(); 
	}

    return "success";
}





/** MEMBER ENROLLMENT STATUS WEB SERVICES **/


/** 
 * Get the status (active vs inactive) of a user's enrollment (membership) in a site
 *
 * @param	sessionid	the id of a valid session
 * @param	siteId		the id of the site you want to check 
 * @param	eid			the userid of the person you want to check
 * @return		        active, inactive, blank or error
 * @throws	AxisFault		
 *
 */
public String getMemberStatus(String sessionid, String siteid, String eid) throws AxisFault { 
	
	Session s = establishSession(sessionid); 
	
	String status = "";
	
	try {
		Site site = SiteService.getSite(siteid);

		String userid = userDirectoryService.getUserByEid(eid).getId();
		Member membership = site.getMember(userid);

		if (membership.isActive()) {
			status = "active";
		} else {
			status = "inactive";
		}
		
	} catch (Exception e) {
		LOG.error("WS getMemberStatus(): "+ e.getClass().getName() + " : "+ e.getMessage());
		return "";
	}
	
	return status;
}


/** 
 * Set the status of a user's enrollment (membership) in a site to either active or inactive
 *
 * @param	sessionid	the id of a valid session
 * @param	siteId		the id of the site 
 * @param	eid			the userid of the person whose status you want to set
 * @param	active		true = active, false = inactive
 * @return		        success or exception
 * @throws	AxisFault		
 *
 */
public String setMemberStatus(String sessionid, String siteid, String eid, boolean active) throws AxisFault { 
	
	Session s = establishSession(sessionid); 
	
	try {
		AuthzGroup site = AuthzGroupService.getAuthzGroup("/site/"+siteid);

		String userid = userDirectoryService.getUserByEid(eid).getId();
		Member membership = site.getMember(userid);

		if (membership.isActive() && !active) {
			membership.setActive(false);
		} else if (!membership.isActive() && active) {
			membership.setActive(true);
		}
		AuthzGroupService.save(site);
		//SiteService.save(site);
		
	} catch (Exception e) {
		LOG.error("WS setMemberStatus(): "+ e.getClass().getName() + " : "+ e.getMessage());
		return "";
	}
	
	return "success";
}

public String longsightAddNewSiteWithProviderId( String sessionid, String siteid, String title, String description, String shortdesc, String iconurl, String infourl, boolean joinable, String joinerrole, boolean published, boolean publicview, String skin, String type, String providerid) throws AxisFault
{
    Session session = establishSession(sessionid);

    try {

        Site siteEdit = null;
        siteEdit = SiteService.addSite(siteid, type);
        siteEdit.setTitle(title);
        siteEdit.setDescription(description);
        siteEdit.setShortDescription(shortdesc);
        siteEdit.setIconUrl(iconurl);
        siteEdit.setInfoUrl(infourl);
        siteEdit.setJoinable(joinable);
        siteEdit.setJoinerRole(joinerrole);
        siteEdit.setPublished(published);
        siteEdit.setPubView(publicview);
        siteEdit.setSkin(skin);
        siteEdit.setType(type);
        siteEdit.setProviderGroupId(providerid);
        SiteService.save(siteEdit);

    }
    catch (Exception e) {
     return e.getClass().getName() + " : " + e.getMessage();
    }
    return "success";
}

public String changeUserEid( String sessionid, String eid, String neweid) throws AxisFault
{
        Session session = establishSession(sessionid);

        try {

                UserEdit userEdit = null;
                String userid = userDirectoryService.getUserByEid(eid).getId();
                userEdit = userDirectoryService.editUser(userid);
                userEdit.setEid(neweid);
                userDirectoryService.commitEdit(userEdit);

        }
        catch (Exception e) {
         return e.getClass().getName() + " : " + e.getMessage();
        }
        return "success";
}

public String longsightGetUserEmail( String sessionid, String userid ) throws AxisFault
{
  Session session = establishSession(sessionid);
  try {
    User user = userDirectoryService.getUserByEid(userid);
    return user.getEmail();
  } catch (Exception e) {
    LOG.warn("WS getUserEmail() failed for user: " + userid);
    return "";
  }

}

public String longsightGetUserDisplayName( String sessionid, String userid ) throws AxisFault
{
  Session session = establishSession(sessionid);
  try {
    User user = userDirectoryService.getUserByEid(userid);
    return user.getDisplayName();
  } catch (Exception e) {
    LOG.warn("WS getUserDisplayName() failed for user: " + userid);
    return "";
  }

}

public String archiveSite(String sessionid, String siteid) throws AxisFault
{
        Session session = establishSession(sessionid);

        try {
                ArchiveService archiveService = (ArchiveService)ComponentManager.get("org.sakaiproject.archive.api.ArchiveService");
                String msg = archiveService.archive(siteid);
        }
        catch (Exception e) {
                return e.getClass().getName() + " : " + e.getMessage();
        }
        return "success";
}

/**
 * Add a property to a page in a site
 * 
 * @param   sessionid       the id of a valid session
 * @param   siteid          the id of the site to add the page to
 * @param   pagetitle       the title of the page the tool exists in
 * @param   propname        the name of the property
 * @param   propvalue       the value of the property
 * @return                  success or exception message
 *
 * TODO: fix for if any values (except sessionid and siteid) are blank or invalid, it is still returning success - SAK-15334
 */
public String addConfigPropertyToPage( String sessionid, String siteid, String pagetitle, String propname, String propvalue) throws AxisFault
{
    Session session = establishSession(sessionid);

    try {

        Site siteEdit = SiteService.getSite(siteid);
        List pageEdits = siteEdit.getPages();
        for (Iterator i = pageEdits.iterator(); i.hasNext();)
        {
            SitePage pageEdit = (SitePage) i.next();
            if (pageEdit.getTitle().equals(pagetitle))
            {
                ResourcePropertiesEdit propsedit = pageEdit.getPropertiesEdit();
                propsedit.addProperty(propname, propvalue); // is_home_page = true
            }
        }
        SiteService.save(siteEdit);

    }
    catch (Exception e) {
        LOG.error("WS addConfigPropertyToPage(): " + e.getClass().getName() + " : " + e.getMessage());
        return e.getClass().getName() + " : " + e.getMessage();
    }
    return "success";
}

public String addInactiveMemberToSiteWithRole(String sessionid, String siteid, String eid, String roleid) throws AxisFault
{
    Session session = establishSession(sessionid);

    try {
        Site site = SiteService.getSite(siteid);
        String userid = userDirectoryService.getUserByEid(eid).getId();
        site.addMember(userid,roleid,false,false);
        SiteService.save(site);
    }
    catch (Exception e) {
        return e.getClass().getName() + " : " + e.getMessage();
    }
    return "success";
}

public String longsightChangeSiteDescriptions( String sessionid, String siteid, String description, String shortDescription) throws AxisFault
{
    Session session = establishSession(sessionid);

    try {

        Site siteEdit = null;
        siteEdit = SiteService.getSite(siteid);
        siteEdit.setDescription(description);
        siteEdit.setShortDescription(shortDescription);
        SiteService.save(siteEdit);

    }
    catch (Exception e) {
        LOG.warn("WS changeSiteDescription(): " + e.getClass().getName() + " : " + e.getMessage());
        return e.getClass().getName() + " : " + e.getMessage();
    }
    return "success";
}

public String changeUserFirstAndLastName( String sessionid, String eid, String firstName, String lastName) throws AxisFault
{
    Session session = establishSession(sessionid);

    try {

        UserEdit userEdit = null;
        String userid = userDirectoryService.getUserByEid(eid).getId();
        userEdit = userDirectoryService.editUser(userid);
        userEdit.setFirstName(firstName);
        userEdit.setLastName(lastName);
        userDirectoryService.commitEdit(userEdit);

    }
    catch (Exception e) {
     return e.getClass().getName() + " : " + e.getMessage();
    }
    return "success";
}

public String getUserFirstName( String sessionid, String eid ) throws AxisFault
{
    Session session = establishSession(sessionid);
    try {
        User user = userDirectoryService.getUserByEid(eid);
        return user.getFirstName();
    } catch (Exception e) {
        LOG.error("WS getUserFirstName() failed for user: " + eid + " : " + e.getClass().getName() + " : " + e.getMessage());
        return "";
    }
}

public String getUserLastName( String sessionid, String eid ) throws AxisFault
{
    Session session = establishSession(sessionid);
    try {
        User user = userDirectoryService.getUserByEid(eid);
        return user.getLastName();
    } catch (Exception e) {
        LOG.error("WS getUserLastName() failed for user: " + eid + " : " + e.getClass().getName() + " : " + e.getMessage());
        return "";
    }
}

// Return XML document listing all sites user has read or write access
public String getSitesUserCanAccess(String sessionid)
	throws AxisFault
{
	Session s = establishSession(sessionid);
	
	try 
	{
		List allSites = SiteService.getSites(SelectionType.ACCESS, null, null,
														  null, SortType.TITLE_ASC, null);
		List moreSites = SiteService.getSites(SelectionType.UPDATE, null, null,
															null, SortType.TITLE_ASC, null);
		
		if ( (allSites == null || moreSites == null) ||
			  (allSites.size() == 0 && moreSites.size() == 0) )
			return "<list/>";

		// Remove duplicates and combine two lists
		allSites.removeAll( moreSites );
		allSites.addAll( moreSites );
		
		Document dom = Xml.createDocument();
		Node list = dom.createElement("list");
		dom.appendChild(list);
		
		for (Iterator i = allSites.iterator(); i.hasNext();)
		{
		   Site site = (Site)i.next();
			Node item = dom.createElement("item");
			Node siteId = dom.createElement("siteId");
			siteId.appendChild( dom.createTextNode(site.getId()) );
			Node siteTitle = dom.createElement("siteTitle");
			siteTitle.appendChild( dom.createTextNode(site.getTitle()) );
			
			item.appendChild(siteId);
			item.appendChild(siteTitle);
			list.appendChild(item);
		}
		
		return Xml.writeDocumentToString(dom);
	}
	catch (Exception e) 
	{
		return "<exception/>";
	}
}

// Return XML document listing all sites user has read or write access
public String getSitesUserCanAccessFilteredFromPreferences(String sessionid)
	throws AxisFault
{
	Session s = establishSession(sessionid);
	int prefTabs = 4;
    List prefExclude = new Vector();
    List prefOrder = new Vector();
	
	try 
	{
		try 
		{
				Preferences prefs = PreferencesService.getPreferences(s.getUserId());
				ResourceProperties props = prefs.getProperties("sakai:portal:sitenav");
				prefTabs = (int) props.getLongProperty("tabs");

				List l = props.getPropertyList("exclude");
				if (l != null)
				{
						prefExclude = l;
				}

				l = props.getPropertyList("order");
				if (l != null)
				{
						prefOrder = l;
				}

				// the number of tabs to display
				int tabsToDisplay = prefTabs;
		}
		catch (Exception e2) {
			System.out.println("Could not find preferences for this user");
		}

		List allSites = SiteService.getSites(SelectionType.ACCESS, null, null,
														  null, SortType.TITLE_ASC, null);
		List moreSites = SiteService.getSites(SelectionType.UPDATE, null, null,
															null, SortType.TITLE_ASC, null);
		
		if ( (allSites == null || moreSites == null) ||
			  (allSites.size() == 0 && moreSites.size() == 0) )
			return "<list/>";

		// Remove duplicates and combine two lists
		allSites.removeAll( moreSites );

		// remove all in exclude from mySites
		allSites.removeAll(prefExclude);

		allSites.addAll( moreSites );
		
		Document dom = Xml.createDocument();
		Node list = dom.createElement("list");
		dom.appendChild(list);
		
		for (Iterator i = allSites.iterator(); i.hasNext();)
		{
		   Site site = (Site)i.next();
			Node item = dom.createElement("item");
			Node siteId = dom.createElement("siteId");
			siteId.appendChild( dom.createTextNode(site.getId()) );
			Node siteTitle = dom.createElement("siteTitle");
			siteTitle.appendChild( dom.createTextNode(site.getTitle()) );
			
			item.appendChild(siteId);
			item.appendChild(siteTitle);
			list.appendChild(item);
		}

		
		return Xml.writeDocumentToString(dom);
	}
	catch (Exception e) 
	{
		e.printStackTrace();
		return "<exception/>";
	}
}

public String longsightRemoveUserIdFromSite(String sessionid, String siteid, String userid) throws AxisFault
{
    Session session = establishSession(sessionid);

    try {
        Site site = SiteService.getSite(siteid);
        site.removeMember(userid);
        SiteService.save(site);
    }
    catch (Exception e) {
        return e.getClass().getName() + " : " + e.getMessage();
    }
    return "success";
}

public boolean longsightUserIdExists( String sessionid, String id) throws AxisFault
{
    Session session = establishSession(sessionid);

    try {

        UserEdit userEdit = null;
        String userid = userDirectoryService.getUser(id).getId();

        if (userid != null) {
            return true;
        }
        else {
            return false;
        }

    }
    catch (Exception e) {
     return false;
    }
}

public boolean doesGroupExistInSite(String sessionid, String siteid, String grouptitle) throws AxisFault
{
    Session s = establishSession(sessionid);

    try {
        Site site = SiteService.getSite(siteid);

        for (Iterator iter = site.getGroups().iterator(); iter.hasNext();) {
            Group group = (Group) iter.next();
            if (group.getTitle().equals(grouptitle)) {
                return true;
            }
        }
    }
    catch (Exception e) {
        LOG.error("WS doesGroupExistInSite(): " + e.getClass().getName() + " : " + e.getMessage());
    }
    return false;
}

public String setContentResourceType (String sessionid, String resourceid, String resourcetype) throws AxisFault
{
    Session session = establishSession(sessionid);

    try {
        System.out.println("editing resource: " + resourceid);
        ContentResourceEdit cre = contentHostingService.editResource(resourceid);
        if (resourcetype.equals("url")) {
                cre.setResourceType(ResourceType.TYPE_URL);
        }
        else {
                cre.setResourceType(ResourceType.TYPE_UPLOAD);
        }
        contentHostingService.commitResource(cre);
    }
    catch (Exception e) {
        LOG.error("WS setContentResourceType(): " + e.getClass().getName() + " : " + e.getMessage());
        return e.getClass().getName() + " : " + e.getMessage();
    }
    return "success";
}

public String changeUserEidById( String sessionid, String id, String neweid) throws AxisFault
{
        Session session = establishSession(sessionid);

        try {

                UserEdit userEdit = null;
                String userid = userDirectoryService.getUser(id).getId();
                userEdit = userDirectoryService.editUser(userid);
                userEdit.setEid(neweid);
                userDirectoryService.commitEdit(userEdit);

        }
        catch (Exception e) {
         return e.getClass().getName() + " : " + e.getMessage();
        }
        return "success";
}

/**
 * Gets a XML string containing the annoucement details
 * 
 * @param sessionid
 *        The Session Id.
 * @param userId
 *        The user you want to get the Forums for 
 *        
 * @return returns a XML string containing the annoucement details
 * 
 * @throws AxisFault 
 * 
 * 
 */
public String getSynMsgcntr(String sessionid, String eid) throws AxisFault
{
	establishSession(sessionid);
	Map<String, Integer> count = new HashMap<String, Integer>();
	
	Document dom = Xml.createDocument();
	Node msgcntr = dom.createElement("msgcntr");
	dom.appendChild(msgcntr);
	
	String retVal = "";
	String userId = "";
	
	try{ 
	    userId = userDirectoryService.getUserByEid(eid).getId();
	} catch (Exception e) {
	    return "Error: User not defined.";
	}
	
	List<SynopticMsgcntrItem> synItems;
	SynopticMsgcntrManager synopticMsgcntrManager = SynopticMsgcntrManagerCover.getInstance();
	synItems = synopticMsgcntrManager.getWorkspaceSynopticMsgcntrItems(userId);
	
	Preferences prefs = PreferencesService.getPreferences(userId);
    ResourceProperties props = prefs.getProperties("sakai:portal:sitenav");
    List<String> orderedSites = props.getPropertyList("order");

    List<String> excludedSites = props.getPropertyList("exclude");
	
	if(excludedSites != null){
    	//user has set preferences so filter out any missing sites:
    	for (Iterator iterator = synItems.iterator(); iterator.hasNext();) {
    		SynopticMsgcntrItem synItem = (SynopticMsgcntrItem) iterator.next();
    		if(excludedSites.contains(synItem.getSiteId())){
    			iterator.remove();
    		}
    	}
    }
    
    for (SynopticMsgcntrItem synopticMsgcntrItem : synItems) {
        String synopticSiteId = synopticMsgcntrItem.getSiteId();
        // synopticMsgcntrItem.isHideItem() lets us know if the site is hidden in the synoptic tool
        if(synopticSiteId != null && !"".equals(synopticSiteId) && !synopticMsgcntrItem.isHideItem()){
            
            String mUrl = "";
            String fUrl = "";
            
            try {
                Site site = SiteService.getSite(synopticSiteId);
                
                // serverConfigurationService.getPortalUrl() was returning http://localhost/Apache-Axis, so I have removed it for now
                // instead you should put in http://sakai/portal in it's place.
                
                ToolConfiguration mTool = site.getToolForCommonId("sakai.messages");
                if (mTool == null) {
                    mTool = site.getToolForCommonId("sakai.messagecenter");
                    if (mTool != null) {
                        mUrl = "/directtool/" + mTool.getId() + "/sakai.messageforums.helper.helper/main";
	    			}
                } else {
                    mUrl = "/directtool/" + mTool.getId() + "/sakai.messageforums.helper.helper/privateMsg/pvtMsgHpView";
                }
        
                ToolConfiguration fTool = site.getToolForCommonId("sakai.forums");
                if (fTool != null) {
        		    fUrl = "/directtool/" + fTool.getId() + "/sakai.messageforums.helper.helper/discussionForum/forumsOnly/dfForums";
        	    }
        	    
		    } catch (Exception e) {
		        return "Error: Cannot get Site for siteid, url cannot be generated."+e.toString();
		    }
            
	    
            Node messageNode = dom.createElement("msgcntrList");
            msgcntr.appendChild(messageNode);
    
            Node idNode = dom.createElement("siteid");
            messageNode.appendChild(idNode);
            idNode.appendChild(dom.createTextNode(synopticSiteId));
            
            Node titleNode = dom.createElement("sitetitle");
            messageNode.appendChild(titleNode);
            titleNode.appendChild(dom.createTextNode(synopticMsgcntrItem.getSiteTitle()));
    
            Node fCountNode = dom.createElement("forumCount");
            messageNode.appendChild(fCountNode);
            fCountNode.appendChild(dom.createTextNode(String.valueOf(synopticMsgcntrItem.getNewForumCount() )));
            
            Node mCountNode = dom.createElement("messageCount");
            messageNode.appendChild(mCountNode);
            mCountNode.appendChild(dom.createTextNode(String.valueOf(synopticMsgcntrItem.getNewMessagesCount())));
            
            Node fLink = dom.createElement("forumUrl");
            messageNode.appendChild(fLink);
            fLink.appendChild(dom.createTextNode(fUrl));
            
            Node mLink = dom.createElement("messageUrl");
            messageNode.appendChild(mLink);
            mLink.appendChild(dom.createTextNode(mUrl));
            
        }
	    
	}

	retVal = Xml.writeDocumentToString(dom);

	return retVal;
}

public Boolean longsightAddMemberToGroup( String sessionId, String siteId, String groupId, String eid ) throws AxisFault
{
    Session session = establishSession(sessionId);
    try
    {
        Site site = SiteService.getSite(siteId);
        Group group = site.getGroup(groupId);
        if ( group == null )
            return false;

        String userId = userDirectoryService.getUserByEid(eid).getId();

        Role r = site.getUserRole(userId);
        Member m = site.getMember(userId);
        group.addMember(userId, r != null ? r.getId()   : "",
                             m != null ? m.isActive() : true,   false);
        SiteService.save(site);
        return true;
    }
    catch (Exception e)
    {
        throw new AxisFault(e.toString());
    }
}

public String longsightGetFoldersInSite(String sessionid, String siteId) {
    try {
            Session session = establishSession(sessionid);
            String homeCollectionString = contentHostingService.getSiteCollection(siteId);
            ContentCollection homeCollection = contentHostingService.getCollection(homeCollectionString);
            List memberIds = homeCollection.getMembers();
            Iterator it = memberIds.iterator();

            String concat = "";
            while(it.hasNext()) {
                String memberId = (String) it.next();
                concat += memberId;

                if (it.hasNext()) {
                    concat += "$";
                }
            }
            return concat;

    }
    catch (Exception e) {
        LOG.error(e.getMessage() + " could not retrieve folders for siteID: " + siteId);
        e.printStackTrace();
        return "false";
        //return "error: " + e.getMessage();
    }

}

public String longsightHideFolder(String sessionid, String folderString) {
    try {
            Session session = establishSession(sessionid);
            ContentCollectionEdit collection = contentHostingService.editCollection(folderString);
            collection.setHidden();
            contentHostingService.commitCollection(collection);
            return "success";
    }
    catch (Exception e) {
            e.printStackTrace();
            return "false";
    }

}

public String getCourseGrades(String sessionId, String siteId, String instructorId) throws AxisFault
{
  Session session = establishSession(sessionId);
  
  if (!securityService.isSuperUser()) {
    LOG.warn("WS getCourseGrades(): Permission denied. Restricted to super users.");
    throw new AxisFault("WS getCourseGrades(): Permission denied. Restricted to super users.");
  }

  String gradeResult = "";
  try {
    if (longsightIsInstructorOfSite(sessionId, siteId, instructorId)) {
      
      GradebookService aGradebookService = (GradebookService) ComponentManager.get("org.sakaiproject.service.gradebook.GradebookService");
      
      Gradebook gb = (Gradebook) aGradebookService.getGradebook(siteId);

      if (gb.isCourseGradeDisplayed()) {
        // get the calculated grades
        Map<String, String> cCourseGrade = aGradebookService.getCalculatedCourseGrade(siteId); 
        Map<String, String> eCourseGrade = aGradebookService.getEnteredCourseGrade(siteId);

        // override any grades the instructor has manually set
        for (Map.Entry<String, String> entry : eCourseGrade.entrySet()) {
          cCourseGrade.put(entry.getKey(), entry.getValue());
        }

        Document dom = Xml.createDocument();
        Node course = dom.createElement("course");
        dom.appendChild(course);

        Node course_id = dom.createElement("course_id");
        course.appendChild(course_id);
        course_id.appendChild(dom.createTextNode(siteId));

        for (Map.Entry<String, String> entry : cCourseGrade.entrySet()) {
          Node student = dom.createElement("student");
          course.appendChild(student);

          Node student_id = dom.createElement("student_id");
          student.appendChild(student_id);
          student_id.appendChild(dom.createTextNode(entry.getKey()));

          Node course_grade = dom.createElement("course_grade");
          student.appendChild(course_grade);

          course_grade.appendChild(dom.createTextNode(entry.getValue()));
        }

        gradeResult = Xml.writeDocumentToString(dom);
      } else {
        Document dom = Xml.createDocument();
        Node error = dom.createElement("error");
        error.appendChild(dom.createTextNode("Grades for course "+siteId+" have not been released to students yet inside Sakai."));
        dom.appendChild(error);
        gradeResult = Xml.writeDocumentToString(dom);
      }
    } else {
      Document dom = Xml.createDocument();
      Node error = dom.createElement("error");
      error.appendChild(dom.createTextNode(instructorId+" is not allowed to grade site "+siteId+" in Sakai."));
      dom.appendChild(error);
      gradeResult = Xml.writeDocumentToString(dom);
    }

  } catch (Exception e) {
    return e.getClass().getName() + " : " + e.getMessage();
  }

  return gradeResult;
}

public String getManyCourseGrades(String sessionId, String siteIds) throws AxisFault
{
  Session session = establishSession(sessionId);
  
  if (!securityService.isSuperUser()) {
    LOG.warn("WS getCourseGrades(): Permission denied. Restricted to super users.");
    throw new AxisFault("WS getCourseGrades(): Permission denied. Restricted to super users.");
  }

  String[] siteArray = siteIds.split(",");

  String gradeResult = "";

  try {

    Document dom = Xml.createDocument();
    Node courses = dom.createElement("courses");
    dom.appendChild(courses);

    for (int i=0; i<siteArray.length; i++) {

      String siteId = siteArray[i];

      if (!"".equals(siteId)) {
      
        GradebookService aGradebookService = (GradebookService) ComponentManager.get("org.sakaiproject.service.gradebook.GradebookService");
        
        Gradebook gb = new Gradebook();
        try {
          gb = (Gradebook) aGradebookService.getGradebook(siteId);
        } catch (Exception e) {
          //Node error = dom.createElement("error");
          //error.appendChild(dom.createTextNode("Gradebook not enabled for course "+siteId+"."));
          //dom.appendChild(error);
          continue;
        }

        //if (gb.isCourseGradeDisplayed()) {
          // get the calculated grades
          Map<String, String> cCourseGrade = aGradebookService.getCalculatedCourseGrade(siteId); 
          Map<String, String> eCourseGrade = aGradebookService.getEnteredCourseGrade(siteId);

          // override any grades the instructor has manually set
          for (Map.Entry<String, String> entry : eCourseGrade.entrySet()) {
            cCourseGrade.put(entry.getKey(), entry.getValue());
          }

          Node course = dom.createElement("course");
          courses.appendChild(course);

          Node course_id = dom.createElement("course_id");
          course.appendChild(course_id);
          course_id.appendChild(dom.createTextNode(siteId));

          for (Map.Entry<String, String> entry : cCourseGrade.entrySet()) {
            Node student = dom.createElement("student");
            course.appendChild(student);

            Node student_id = dom.createElement("student_id");
            student.appendChild(student_id);
            student_id.appendChild(dom.createTextNode(entry.getKey()));

            Node course_grade = dom.createElement("course_grade");
            student.appendChild(course_grade);

            course_grade.appendChild(dom.createTextNode(entry.getValue()));
          }

        /* } else {
          Node error = dom.createElement("error");
          error.appendChild(dom.createTextNode("Grades for course "+siteId+" have not been released to students yet inside Sakai."));
          dom.appendChild(error);
        } */

      }
     
    }
    gradeResult = Xml.writeDocumentToString(dom);

  } catch (Exception e) {
    return e.getClass().getName() + " : " + e.getMessage();
  }

  return gradeResult;
}

public String getAssignmentPointsPossible(String sessionid, String gradebookUid, String assignmentName) throws AxisFault
{
  Session s = establishSession(sessionid);
  String retval = "";

  try {
    GradebookService aGradebookService = (GradebookService) ComponentManager.get("org.sakaiproject.service.gradebook.GradebookService");
    if (aGradebookService == null) {
      return "Cannot get Gradebook service!";
    }

    Assignment a1 = aGradebookService.getAssignment(gradebookUid, assignmentName);
    if (a1 == null) {
      System.out.println("getAssignmentPointsPossible() aGradebookService.getAssignment() is null!");
    }
    retval = retval+a1.getPoints();
  } catch (Exception e) {
    return e.getClass().getName() + " : " + e.getMessage();
  }

  return retval;
}

public String getAssignmentScore(String sessionid, String gradebookUid, String assignmentName, String studentUid) throws AxisFault
{

  Session s = establishSession(sessionid);
  String retval = "";

  try {

    GradebookService aGradebookService = (GradebookService) ComponentManager.get("org.sakaiproject.service.gradebook.GradebookService");
    if (aGradebookService == null) {
      return "Cannot get Gradebook service!";
    }

    /* if (! aGradebookService.isUserAbleToGradeStudent(gradebookUid,"..nonexistentstudent..")) {
      return "Permission Denied";
    } */
    System.out.println("Gradebook: "+gradebookUid+" Assignment: "+assignmentName+" Student: "+studentUid);

    Double score = aGradebookService.getAssignmentScore(gradebookUid, assignmentName, studentUid);
    System.out.println("Score: "+score);
    retval = retval+score;

  } catch (Exception e) {
    return e.getClass().getName() + " : " + e.getMessage();
  }

  return retval;
}

public String getGradebookAssignments(String sessionid, String gradebookUid) throws AxisFault
{
  Session s = establishSession(sessionid);
  String retval = "";

  try {
    GradebookService aGradebookService = (GradebookService) ComponentManager.get("org.sakaiproject.service.gradebook.GradebookService");
    if (aGradebookService == null) {
      return "Cannot get Gradebook service!";
    }

    List a1 = aGradebookService.getAssignments(gradebookUid);
    if (a1 == null) {
      System.out.println("getGradebookAssignments() aGradebookService.getAssignments() is null!");
    }

    Document dom = Xml.createDocument();
    Node xml = dom.createElement("assignments");
    dom.appendChild(xml);

    for (Object a: a1) {
      Assignment assignment = (Assignment) a;
      Node assignmentNode = dom.createElement("assignment");
      xml.appendChild(assignmentNode);

      Node assignment_id = dom.createElement("id");
      assignmentNode.appendChild(assignment_id);
      assignment_id.appendChild(dom.createTextNode(assignment.getId()+""));

      Node assignment_name = dom.createElement("name");
      assignmentNode.appendChild(assignment_name);
      assignment_name.appendChild(dom.createTextNode(assignment.getName()));
    }

    retval = Xml.writeDocumentToString(dom);
  } catch (Exception e) {
    return e.getClass().getName() + " : " + e.getMessage();
  }

  return retval;
}



}
