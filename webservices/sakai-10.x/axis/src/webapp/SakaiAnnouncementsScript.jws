/**********************************************************************************
 * $URL: 
 * $Id: SakaiAnnouncementsScript.jws 2007-05-10 23:55:59Z n.yacoub@auckland.ac.nz $
 ***********************************************************************************
 *
 * Copyright (c) 2003, 2004, 2005, 2006, 2007 The Sakai Foundation.
 * 
 * Licensed under the Educational Community License, Version 1.0 (the "License"); 
 * you may not use this file except in compliance with the License. 
 * You may obtain a copy of the License at
 * 
 *      http://www.opensource.org/licenses/ecl1.php
 * 
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 * See the License for the specific language governing permissions and 
 * limitations under the License.
 *
 **********************************************************************************/

/**
 *  Developed by the University of Auckland - New Zealand
 *  By: Ninos Yacoub - n.yacoub@auckland.ac.nz
 */

import java.util.List;
import java.util.Iterator;
import org.sakaiproject.tool.api.Session;
import org.sakaiproject.tool.cover.SessionManager;

import org.sakaiproject.announcement.api.AnnouncementChannel;
import org.sakaiproject.announcement.api.AnnouncementMessage;
import org.sakaiproject.announcement.api.AnnouncementMessageEdit;
import org.sakaiproject.announcement.cover.AnnouncementService;
import org.sakaiproject.exception.IdUnusedException;
import org.sakaiproject.exception.InUseException;
import org.sakaiproject.exception.PermissionException;

import org.apache.axis.AxisFault;

import org.sakaiproject.util.Xml;
import org.w3c.dom.Document;
import org.w3c.dom.Node;

/**
 * <p>
 * SakaiAnnouncementScript is a java web service that wraps the Announcments tool. You can add, edit, remove, and list
 * all the announcements for a given channel reference.
 * </p>
 */

public class SakaiAnnouncementsScript {

	private Session establishSession(String id) throws AxisFault 
	{
		Session s = SessionManager.getSession(id);
		
		if (s == null)
		{
			throw new AxisFault("Session "+id+" is not active");
		}
		s.setActive();
		SessionManager.setCurrentSession(s);
		return s;
	}

	public String checkSession(String id) {
		Session s = SessionManager.getSession(id);
		if (s == null)
		{
			return "null";
		}
		else
		{
			return id;
		}
	}
	/**
	 * Adds an announcement to the given Channel
	 * 
	 * @param sessionid
	 *        The Session Id.
	 * @param channelReference
	 *        The Channel Reference.
	 * @param subject
	 *        The subject of the announcement.
	 * @param draft
	 *        Boolean whether the announcement is draft or not.
	 * @param body
	 *        The body of the announcement.
	 *        
	 * @return returns the string "success" on success.
	 * 
	 * @throws PermissionException 
	 * @throws IdUnusedException 
	 * @throws AxisFault 
	 * 
	 * @exception IdUnusedException
	 *            If this name is not a defined message in this announcement channel.
	 * @exception PermissionException
	 *            If the user does not have any permissions to read the message.
	 * 
	 */
	public String addAnnouncementMessage(String sessionid, String channelReference, String subject, boolean draft, String body)  throws AxisFault, PermissionException, IdUnusedException {
		
		establishSession(sessionid);

		AnnouncementChannel anChannel = AnnouncementService.getAnnouncementChannel(channelReference);
		
		anChannel.addAnnouncementMessage(subject, draft, null, body);
			
		return "success";
	}
	/**
	 * Edits an announcement
	 * 
	 * @param sessionid
	 *        The Session Id.
	 * @param channelReference
	 *        The Channel Reference.
	 * @param messageID
	 *        The id of the annoucement to be edited.
	 * @param subject
	 *        The subject of the announcement.
	 * @param draft
	 *        Boolean whether the announcement is draft or not.
	 * @param body
	 *        The body of the announcement.
	 *        
	 * @return returns the string "success" on success.
	 * 
	 * @throws PermissionException 
	 * @throws IdUnusedException 
	 * @throws AxisFault 
	 * @throws InUseException
	 * 
	 * @exception IdUnusedException
	 *            If this name is not a defined message in this announcement channel.
	 * @exception PermissionException
	 *            If the user does not have any permissions to read the message.
	 * 
	 */
	public String editAnnouncementMessage(String sessionid, String channelReference, String messageID, String subject, boolean draft, String body)  throws AxisFault, IdUnusedException, PermissionException, InUseException {
		
		establishSession(sessionid);

		AnnouncementChannel anChannel = AnnouncementService.getAnnouncementChannel(channelReference);

		AnnouncementMessageEdit MessageEdit = anChannel.editAnnouncementMessage(messageID);
		MessageEdit.setBody(body);
		MessageEdit.getAnnouncementHeaderEdit().setDraft(draft);
		MessageEdit.getAnnouncementHeaderEdit().setSubject(subject);
		
		anChannel.commitMessage(MessageEdit);
		
		return "success";
	}
	/**
	 * Deletes an announcement
	 * 
	 * @param sessionid
	 *        The Session Id.
	 * @param channelReference
	 *        The Channel Reference.
	 * @param messageID
	 *        The id of the annoucement to be edited.
	 *        
	 * @return returns the string "success" on success.
	 * 
	 * @throws PermissionException 
	 * @throws IdUnusedException 
	 * @throws AxisFault 
	 * @throws PermissionException 
	 * @throws InUseException
	 * 
	 * @exception IdUnusedException
	 *            If this name is not a defined message in this announcement channel.
	 * @exception PermissionException
	 *            If the user does not have any permissions to read the message.
	 * @throws IdUnusedException 
	 * 
	 */
	public String removeAnnouncementMessage(String sessionid, String channelReference, String messageId )  throws AxisFault, PermissionException, IdUnusedException {
		establishSession(sessionid);

		AnnouncementChannel anChannel = AnnouncementService.getAnnouncementChannel(channelReference);
	
		anChannel.removeMessage(messageId);
	
		return "success";
	}
	/**
	 * Gets a XML string containing the annoucement details
	 * 
	 * @param sessionid
	 *        The Session Id.
	 * @param channelReference
	 *        The Channel Reference.
	 * @param messageID
	 *        The id of the annoucement to be edited.
	 *        
	 * @return returns a XML string containing the annoucement details
	 * 
	 * @throws PermissionException 
	 * @throws IdUnusedException 
	 * @throws AxisFault 
	 *
	 * @exception IdUnusedException
	 *            If this name is not a defined message in this announcement channel.
	 * @exception PermissionException
	 *            If the user does not have any permissions to read the message.
	 * 
	 * 
	 */
	public String getAnnouncementMessage(String sessionid, String channelReference, String messageId )  throws AxisFault, IdUnusedException, PermissionException {
		establishSession(sessionid);
		String retVal = "";
		
		Document dom = Xml.createDocument();
		Node message = dom.createElement("message");
		dom.appendChild(message);
		
		AnnouncementChannel anChannel = AnnouncementService.getAnnouncementChannel(channelReference);
	
		AnnouncementMessage annMessage =  (AnnouncementMessage) anChannel.getMessage(messageId);
		
		constructMessageDetails(dom, message, annMessage);

		retVal = Xml.writeDocumentToString(dom);
		return retVal;
	}

	/**
	 * Gets a XML string containing the annoucement details
	 * 
	 * @param sessionid
	 *        The Session Id.
	 * @param channelReference
	 *        The Channel Reference.
	 * @param ascending
	 *        A boolean to state the sorting type
	 *        
	 * @return returns a XML string containing the annoucement details
	 * 
	 * @throws PermissionException 
	 * @throws IdUnusedException 
	 * @throws AxisFault 
	 *
	 * @exception IdUnusedException
	 *            If this name is not a defined message in this announcement channel.
	 * @exception PermissionException
	 *            If the user does not have any permissions to read the message.
	 * 
	 * 
	 */
	public String getAnnouncements( String sessionid, String channelReference, boolean ascending ) throws AxisFault, PermissionException, IdUnusedException
	{
		establishSession(sessionid);
		
		Document dom = Xml.createDocument();
		Node announcements = dom.createElement("Announcements");
		dom.appendChild(announcements);
		
		String retVal = "";
		
		AnnouncementChannel anChannel = AnnouncementService.getAnnouncementChannel(channelReference);
		
		Node refNode = dom.createElement("reference");
		announcements.appendChild(refNode);
		refNode.appendChild(dom.createTextNode(anChannel.getReference()));

		Node contextNode = dom.createElement("context");
		announcements.appendChild(contextNode);
		contextNode.appendChild(dom.createTextNode(anChannel.getContext()));
		
		Node urlNode = dom.createElement("url");
		announcements.appendChild(urlNode);
		urlNode.appendChild(dom.createTextNode(anChannel.getUrl("http://localhost:8080/access2")));
	
		Node messagesNode = dom.createElement("announcementlist");
		announcements.appendChild(messagesNode);
		
		List annMsgs = anChannel.getMessages(null, ascending);
		
		for (Iterator ii = annMsgs.iterator(); ii.hasNext();){
			AnnouncementMessage aMessage = (AnnouncementMessage) ii.next();
			
			if (AnnouncementService.isMessageViewable(aMessage)) {
			Node messageNode = dom.createElement("announcement");
			messagesNode.appendChild(messageNode);

			constructMessageDetails(dom, messageNode, aMessage);
			}
			
		}

		retVal = Xml.writeDocumentToString(dom);

		return retVal;
	}
	/**
	 * 
	 * The Announcement XML structure
	 * 	<message>
	 * 		<id>1<id/>
	 * 		<from></from>
	 * 		<draft></draft>
	 * 		<date></date>
	 * 		<subject></subject>
	 * 		<body></body>
	 * 	</message>
	 * 
	 */

	private void constructMessageDetails(Document dom, Node message, AnnouncementMessage annMessage) {
		Node idNode = dom.createElement("id");
		message.appendChild(idNode);
		idNode.appendChild(dom.createTextNode(annMessage.getAnnouncementHeader().getId()));
		
		Node fromNode = dom.createElement("from");
		message.appendChild(fromNode);
		fromNode.appendChild(dom.createTextNode(annMessage.getAnnouncementHeader().getFrom().getDisplayName()));
		
		Node draftNode = dom.createElement("draft");
		message.appendChild(draftNode);
		if(annMessage.getAnnouncementHeader().getDraft()){
			draftNode.appendChild(dom.createTextNode("true"));
		} else {
			draftNode.appendChild(dom.createTextNode("false"));
		}
		
		Node dateNode = dom.createElement("date");
		message.appendChild(dateNode);
		dateNode.appendChild(dom.createTextNode(annMessage.getAnnouncementHeader().getDate().getDisplay()));
		
		
		Node subNode = dom.createElement("subject");
		message.appendChild(subNode);
		subNode.appendChild(dom.createTextNode(annMessage.getAnnouncementHeader().getSubject()));
		
		Node bodyNode = dom.createElement("body");
		message.appendChild(bodyNode);
		bodyNode.appendChild(dom.createTextNode(annMessage.getBody()));
	}
	


}

