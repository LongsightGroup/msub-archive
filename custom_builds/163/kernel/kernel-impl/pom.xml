<?xml version="1.0"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <artifactId>kernel</artifactId>
    <groupId>org.sakaiproject</groupId>
    <version>1.3.3</version>
    <relativePath>../pom.xml</relativePath>
  </parent>
  <name>Sakai Core Kernel Implementation</name>
  <groupId>org.sakaiproject.kernel</groupId>
  <artifactId>sakai-kernel-impl</artifactId>
  <version>1.3.3</version>
  <organization>
    <name>Sakai Foundation</name>
    <url>http://sakaiproject.org/</url>
  </organization>
  <inceptionYear>2003</inceptionYear>
  <scm>
    <connection>scm:svn:https://source.sakaiproject.org/svn/kernel/tags/kernel-1.3.3/kernel-impl</connection>
    <developerConnection>scm:svn:https://source.sakaiproject.org/svn/kernel/tags/kernel-1.3.3/kernel-impl</developerConnection>
    <url>https://source.sakaiproject.org/svn/kernel/tags/kernel-1.3.3/kernel-impl</url>
  </scm>
  <packaging>jar</packaging>
  <properties>
    <deploy.target />
    <maven.test.jvmargs />
  </properties>
  <build>  
    <plugins>
      <plugin>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <!-- <redirectTestOutputToFile>true</redirectTestOutputToFile> -->
          <testFailureIgnore>true</testFailureIgnore> 
          <forkMode>pertest</forkMode>
          <systemPropertyVariables>
            <derby.stream.error.file>${project.build.directory}/derby.log</derby.stream.error.file>
            <derby.system.durability>test</derby.system.durability>
            <known.issues />
          </systemPropertyVariables>
        </configuration>
      </plugin>
    </plugins>
  </build>
  <dependencies>
    <dependency>
        <groupId>com.rsmart</groupId>
        <artifactId>rsmart-antivirus-api</artifactId>
        <version>2.9.3</version>
        <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.sakaiproject.kernel</groupId>
      <artifactId>sakai-kernel-api</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>org.sakaiproject.kernel</groupId>
      <artifactId>sakai-component-manager</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>org.sakaiproject.kernel</groupId>
      <artifactId>sakai-kernel-util</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>org.sakaiproject.kernel</groupId>
      <artifactId>sakai-kernel-storage-util</artifactId>
      <version>${project.version}</version>
    </dependency>
    
    <!--  needed to make the tests work as we need to bring up the Component Manager -->
    <dependency>
      <groupId>org.sakaiproject.kernel</groupId>
      <artifactId>sakai-kernel-private</artifactId>
      <version>${project.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>commons-logging</groupId>
      <artifactId>commons-logging</artifactId>
    </dependency>
    <dependency>
      <groupId>commons-codec</groupId>
      <artifactId>commons-codec</artifactId>
    </dependency>
    <dependency>
      <groupId>commons-io</groupId>
      <artifactId>commons-io</artifactId>
    </dependency>
    <dependency>
      <groupId>commons-dbcp</groupId>
      <artifactId>commons-dbcp</artifactId>
    </dependency>
	<dependency>
		<groupId>commons-lang</groupId>
		<artifactId>commons-lang</artifactId>
	</dependency>
	<dependency>
		<groupId>commons-beanutils</groupId>
		<artifactId>commons-beanutils</artifactId>
		<version>1.7.0</version>
	</dependency>
    <dependency>
      <groupId>commons-validator</groupId>
      <artifactId>commons-validator</artifactId>
      <version>1.4.0</version>
    </dependency>
    <dependency>
        <!-- for parsing CSV data from config service files -->
        <groupId>net.sf.opencsv</groupId>
        <artifactId>opencsv</artifactId>
        <version>2.3</version>
    </dependency>
	<dependency>
		<groupId>org.slf4j</groupId>
		<artifactId>slf4j-log4j12</artifactId>
	</dependency>
	<dependency>
		<groupId>org.slf4j</groupId>
		<artifactId>slf4j-api</artifactId>
	</dependency>
    <dependency>
      <groupId>hsqldb</groupId>
      <artifactId>hsqldb</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-log4j12</artifactId>
    </dependency>
    <dependency>
      <groupId>log4j</groupId>
      <artifactId>log4j</artifactId>
    </dependency>
    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>servlet-api</artifactId>
    </dependency>
    <dependency>
      <groupId>net.sf.ehcache</groupId>
      <artifactId>ehcache-core</artifactId>
    </dependency>
    <dependency>
      <groupId>javax.mail</groupId>
      <artifactId>mail</artifactId>
    </dependency>
    <dependency>
      <groupId>javax.activation</groupId>
      <artifactId>activation</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring</artifactId>
    </dependency>
    <dependency>
      <groupId>org.hibernate</groupId>
      <artifactId>hibernate</artifactId>
    </dependency>
    <dependency>
        <groupId>com.ibm.icu</groupId>
        <artifactId>icu4j</artifactId>
        <version>4.8</version>
        <type>jar</type>
        <scope>compile</scope>
    </dependency>
    <!-- antisamy -->
    <dependency>
      <groupId>org.owasp.antisamy</groupId>
      <artifactId>antisamy</artifactId>
      <version>1.5.2</version>
      <type>jar</type>
    </dependency>
	<dependency>
		<groupId>com.carrotsearch</groupId>
		<artifactId>java-sizeof</artifactId>
		<version>0.0.5-SNAPSHOT</version>
	</dependency>
    
    <!-- TESTING -->
    <dependency>
      <groupId>org.subethamail</groupId>
      <artifactId>subethasmtp</artifactId>
      <version>3.1.6</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.jmock</groupId>
      <artifactId>jmock</artifactId>
      <version>2.5.1</version>
      <scope>test</scope>
    </dependency>
    <dependency>
        <groupId>org.jmock</groupId>
        <artifactId>jmock-junit4</artifactId>
        <version>2.5.1</version>
        <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.jmock</groupId>
      <artifactId>jmock-junit3</artifactId>
      <version>2.5.1</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <profiles>
    <profile>
      <!-- This profile will enable you to run the StorageConverter -->
      <id>storage-convert</id>
      <dependencies>
        <!-- need to setup this dependency to your database driver.
        <dependency>
          <groupId>mysql</groupId>
           <artifactId>connector</artifactId>
           <version>5.1.30</version>
           <scope>system</scope>
           <systemPath>path/to/mysql-connector-java-5.1.30-bin.jar</systemPath>
        </dependency>
        -->
      </dependencies>
      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <version>1.3.1</version>
            <!-- This execution runs the storage conversion from one FileSystemHandler to another. -->
            <configuration>
              <classpathScope>test</classpathScope>
              <skip>false</skip>
              <executable>java</executable>
              <arguments>
                <argument>-classpath</argument>
                <classpath />
                <argument>org.sakaiproject.content.impl.util.StorageConverter</argument>
                <!-- Use either a properties file or the properties...or both
                <argument>-p</argument>
                <argument>src/main/resource/my.properties</argument>
                -->
                <!-- just set the properties
                <argument>-connectionDriver</argument>
                <argument>The database connection driver class.</argument>
                <argument>-connectionURL</argument>
                <argument>The database connection URL.</argument>
                <argument>-connectionUsername</argument>
                <argument>The database connection username.</argument>
                <argument>-connectionPassword</argument>
                <argument>The database connection password.</argument>
                <argument>-sourceFileSystemHandler</argument>
                <argument>This is the full class name of the source FileSystemHandler.</argument>
                <argument>-sourceFileSystemHandler.{some property}</argument>
                <argument>You can set any property on the source FileSystemHandler by referensing their property names.</argument>
                <argument>-sourceBodyPath</argument>
                <argument>The path set in sakai.properties for the source.</argument>
                <argument>-destinationFileSystemHandler</argument>
                <argument>This is the full class name of the destination FileSystemHandler.</argument>
                <argument>-destinationFileSystemHandler.{some property}</argument>
                <argument>You can set any property on the destination FileSystemHandler by referensing their property names.</argument>
                <argument>-destinationBodyPath</argument>
                <argument>The path set in sakai.properties for the destination.</argument>
                <argument>-deleteFromSource</argument>
                <argument>Whether to delete the source files. Default false.</argument>
                <argument>-contentSql</argument>
                <argument>The sql statement to retrieve the resource id's and paths. Default is new ContentServiceSqlDefault().getResourceIdAndFilePath()</argument>
                -->
              </arguments>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

</project>
