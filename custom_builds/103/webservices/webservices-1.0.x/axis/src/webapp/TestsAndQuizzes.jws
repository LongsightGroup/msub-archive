import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.io.InputStream;
import java.io.IOException;
import java.io.ByteArrayInputStream;
import org.sakaiproject.authz.api.SecurityService;
import org.sakaiproject.tool.api.Session;
import org.sakaiproject.tool.api.SessionManager;
import org.sakaiproject.exception.IdUnusedException;
import org.apache.axis.AxisFault;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.sakaiproject.user.api.User;
import org.sakaiproject.user.api.UserDirectoryService;
import org.sakaiproject.site.api.Site;
import org.sakaiproject.site.api.SiteService.SelectionType;
import org.sakaiproject.site.api.SiteService.SortType;
import org.sakaiproject.site.api.SiteService;
import org.sakaiproject.tool.assessment.data.dao.grading.AssessmentGradingData;
import org.sakaiproject.tool.assessment.samlite.api.QuestionGroup;
import org.sakaiproject.tool.assessment.samlite.api.SamLiteService;
import org.sakaiproject.component.cover.ComponentManager;
import org.sakaiproject.tool.assessment.qti.constants.QTIVersion;
import org.sakaiproject.tool.assessment.facade.AssessmentFacade;
import org.sakaiproject.tool.assessment.facade.AssessmentGradingFacade;
import org.sakaiproject.tool.assessment.facade.AssessmentTemplateFacade;
import org.sakaiproject.tool.assessment.facade.PublishedAssessmentFacade;
import org.sakaiproject.tool.assessment.facade.PublishedAssessmentFacadeQueries;
import org.sakaiproject.tool.assessment.services.assessment.AssessmentService;
import org.sakaiproject.tool.assessment.services.assessment.PublishedAssessmentService;
import org.sakaiproject.util.FormattedText;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.xml.sax.SAXException;
import org.sakaiproject.util.Xml;
import org.w3c.dom.Document;
import org.w3c.dom.Node;

/**
 * Expose Test and Quizzes via web services
 */

public class TestsAndQuizzes {

	//private EventTrackingService eventTrackingService;
	private SessionManager sessionManager;
	private UserDirectoryService userDirectoryService;
	private SiteService siteService;
	private SamLiteService samLiteService;
	private SecurityService securityService;

	private static final Log LOG = LogFactory.getLog(TestsAndQuizzes.class);

	public TestsAndQuizzes() {
		samLiteService = (SamLiteService) ComponentManager.get("org_sakaiproject_tool_assessment_services_samlite_SamLiteService"); 
		siteService = (SiteService) ComponentManager.get(SiteService.class.getName());
		//eventTrackingService = (EventTrackingService) ComponentManager.get(EventTrackingService.class.getName());
		sessionManager = (SessionManager) ComponentManager.get(SessionManager.class.getName());
		userDirectoryService = (UserDirectoryService) ComponentManager.get(UserDirectoryService.class.getName());
		securityService = (SecurityService) ComponentManager.get(SecurityService.class.getName());
	}


	/** 
	 * establishSession - will connect to an existing session
	 *
	 * @param	String sessionid	the id of a valid admin session
	 * @return	String Session	       	the session object is returned
	 * 
	 * @throws	AxisFault		TestsAndQuizzes.establishSession(): Session sessionid is not active.
	 *					WS TestsAndQuizzes.establishSession(): Permission denied. Restricted to admin user.
	 *
	 */
	private Session establishSession(String sessionid) throws AxisFault
	{
		Session session  = null;
		session = sessionManager.getSession(sessionid);

		// check if session is active
		if (session == null) {
			LOG.warn("WS TestsAndQuizzes.establishSession(): Session " + sessionid + " is not active.");	
			throw new AxisFault("WS TestsAndQuizzes.establishSession(): Session " + sessionid + " is not active");
		}

		// must be an admin session
		if(!securityService.isSuperUser(session.getUserId())) {
			LOG.warn("WS TestsAndQuizzes.establishSession: Permission denied. Restricted to admin users.");
			throw new AxisFault("WS TestsAndQuizzes.establishSession(): Permission denied. Restricted to admin users.");
		}

		session.setActive();
		sessionManager.setCurrentSession(session);

		return session;
	}


	/** 
	 * findSite - find the sakai site that contains a unique propertyName=propertyValue
	 *
	 * @param	String propertyName		the sakai site property holding the enterprise site id
	 * @param	String propertyValue		the enterprise site id
	 * @return	Site		        	Site object or null if no site
	 * 
	 * @throws	AxisFault			WS TestsAndQuizzes.findSite(): Too many sites found with property - propertyName=propertyValue
	 *
	 */

	private Site findSite(String propertyName, String propertyValue) throws AxisFault {
		LOG.debug("WS TestsAndQuizzes.findSite(): propertyName - " + propertyName + ", propertyValue - " + propertyValue);
		Map propertyCriteria = new HashMap();

		// Replace search property
		propertyCriteria.put(propertyName, propertyValue);

		List list = siteService.getSites(SelectionType.ANY, null, null, propertyCriteria, SortType.NONE, null);

		if (list != null) {
			if (list.size() == 1) {
				return (Site) list.get(0);
			} else if (list.size() > 1) {
				LOG.warn("WS TestsAndQuizzes.findSite(): Too many sites found with property - " + propertyName + "=" + propertyValue);
				throw new AxisFault("WS TestsAndQuizzes.findSite(): Too many sites found with property - " + propertyName + "=" + propertyValue);
			}

        	}
		return null;
	}

	/** 
	 * findAssessmentTemplateId - find the assessment template id
	 *
	 * @param	String title			the title of the template to look for
	 * @return	String		        	the template id if one was found otherwise null
	 * 
	 */

	private String findAssessmentTemplateId(String title) {
		LOG.debug("WS TestsAndQuizzes.findAssessmentTemplateId(): template title - " + title);
		
		AssessmentService aService = new AssessmentService();

		if (aService != null) {
			// will only look at templates created by the authenticated user
			List templates = aService.getTitleOfAllActiveAssessmentTemplates();
		
			for (int i = 0; i < templates.size(); i++) {
				AssessmentTemplateFacade facade = (AssessmentTemplateFacade) templates.get(i);
				if (facade.getTitle().equals(title)) {
					return facade.getAssessmentBaseId().toString();
				}
			}
		}
		return null;
	}
	
	public String getPublishedAssessmentsForSite(String sessionid, String siteid) throws AxisFault {
		Session session = establishSession(sessionid); 

		PublishedAssessmentService publishedAssessmentService = new PublishedAssessmentService();

		ArrayList publishedAssessmentList = publishedAssessmentService.getBasicInfoOfAllPublishedAssessments2(PublishedAssessmentFacadeQueries.TITLE, true, siteid);

		Document dom = Xml.createDocument();
		Node list = dom.createElement("list");
		dom.appendChild(list);

		for (int i = 0; i < publishedAssessmentList.size(); i++) {
			PublishedAssessmentFacade f = (PublishedAssessmentFacade)publishedAssessmentList.get(i);
			Node item = dom.createElement("item");

			Node id = dom.createElement("id");
			id.appendChild( dom.createTextNode(f.getPublishedAssessmentId().toString()));
			item.appendChild(id);

			Node title = dom.createElement("title");
			title.appendChild( dom.createTextNode(f.getTitle()));
			item.appendChild(title);

			list.appendChild(item);
		}

		return Xml.writeDocumentToString(dom);
	}


public String getScoresForSite(String sessionid, String siteid) throws AxisFault {
	Session session = establishSession(sessionid); 

	// establish the xml document
	Document dom = Xml.createDocument();
	Node list = dom.createElement("list");
	dom.appendChild(list);

	PublishedAssessmentService publishedAssessmentService = new PublishedAssessmentService();

	try {

       	Site site = siteService.getSite(siteid);
       	Set users = site.getUsersHasRole("Student");

       	for (Iterator u = users.iterator(); u.hasNext();) {
		String userid = (String) u.next();

		ArrayList scores = publishedAssessmentService.getBasicInfoOfLastOrHighestOrAverageSubmittedAssessmentsByScoringOption(userid, siteid, true);

		for (int i = 0; i < scores.size(); i++) {
			AssessmentGradingFacade agf = (AssessmentGradingFacade) scores.get(i);

			Node item = dom.createElement("item");

			Node assessmentId = dom.createElement("assessmentId");
			assessmentId.appendChild( dom.createTextNode(agf.getPublishedAssessmentId().toString()));
			item.appendChild(assessmentId);

			Node title = dom.createElement("title");
			title.appendChild( dom.createTextNode(agf.getPublishedAssessmentTitle()));
			item.appendChild(title);

			Node finalScore = dom.createElement("finalScore");
			finalScore.appendChild( dom.createTextNode(agf.getFinalScore().toString()));
			item.appendChild(finalScore);

			Node autoScore = dom.createElement("autoScore");
			autoScore.appendChild( dom.createTextNode(agf.getTotalAutoScore().toString()));
			item.appendChild(autoScore);

			Node overrideScore = dom.createElement("overrideScore");
			overrideScore.appendChild( dom.createTextNode(agf.getTotalOverrideScore().toString()));
			item.appendChild(overrideScore);

			Node attemptDate = dom.createElement("attemptDate");
			attemptDate.appendChild( dom.createTextNode(agf.getAttemptDate().toString()));
			item.appendChild(attemptDate);

			Node comments = dom.createElement("comments");
			comments.appendChild( dom.createTextNode(agf.getComments()));
			item.appendChild(comments);

			Node sakaiUserId = dom.createElement("userId");
			sakaiUserId.appendChild( dom.createTextNode(agf.getAgentId()));
			item.appendChild(sakaiUserId);

			Node username = dom.createElement("username");
			try {
				User user = userDirectoryService.getUser(agf.getAgentId());
				String eid = user.getEid();
				username.appendChild( dom.createTextNode(eid) );

				Node firstName = dom.createElement("firstName");
				firstName.appendChild( dom.createTextNode(user.getFirstName()));
				item.appendChild(firstName);
				
				Node lastName = dom.createElement("lastName");
				lastName.appendChild( dom.createTextNode(user.getLastName()));
				item.appendChild(lastName);
			}
			catch (Exception ee) {
				username.appendChild( dom.createTextNode("nouser") );
			}
			item.appendChild(username);



			list.appendChild(item);
		}
	}
	}
        catch (Exception e) {
		e.printStackTrace();
	}

	return Xml.writeDocumentToString(dom);
}


public String getScoresForSiteForUser(String sessionid, String siteid, String userid) throws AxisFault {
	Session session = establishSession(sessionid); 

	// establish the xml document
	Document dom = Xml.createDocument();
	Node list = dom.createElement("list");
	dom.appendChild(list);

	PublishedAssessmentService publishedAssessmentService = new PublishedAssessmentService();

	try {

       	Site site = siteService.getSite(siteid);
       	//Set users = site.getUsersHasRole("Student");
        userid = userDirectoryService.getUserByEid(userid).getId();
        

		ArrayList scores = publishedAssessmentService.getBasicInfoOfLastOrHighestOrAverageSubmittedAssessmentsByScoringOption(userid, siteid, true);
                System.out.println(userid+" "+scores.size());

		for (int i = 0; i < scores.size(); i++) {
			AssessmentGradingFacade agf = (AssessmentGradingFacade) scores.get(i);

			Node item = dom.createElement("item");

			Node assessmentId = dom.createElement("assessmentId");
			assessmentId.appendChild( dom.createTextNode(agf.getPublishedAssessmentId().toString()));
			item.appendChild(assessmentId);

			Node title = dom.createElement("title");
			title.appendChild( dom.createTextNode(agf.getPublishedAssessmentTitle()));
			item.appendChild(title);

			Node finalScore = dom.createElement("finalScore");
			finalScore.appendChild( dom.createTextNode(agf.getFinalScore().toString()));
			item.appendChild(finalScore);

			Node autoScore = dom.createElement("autoScore");
			autoScore.appendChild( dom.createTextNode(agf.getTotalAutoScore().toString()));
			item.appendChild(autoScore);

			Node overrideScore = dom.createElement("overrideScore");
			overrideScore.appendChild( dom.createTextNode(agf.getTotalOverrideScore().toString()));
			item.appendChild(overrideScore);

			Node attemptDate = dom.createElement("attemptDate");
			attemptDate.appendChild( dom.createTextNode(agf.getAttemptDate().toString()));
			item.appendChild(attemptDate);

			Node comments = dom.createElement("comments");
			comments.appendChild( dom.createTextNode(agf.getComments()));
			item.appendChild(comments);

			Node sakaiUserId = dom.createElement("userId");
			sakaiUserId.appendChild( dom.createTextNode(agf.getAgentId()));
			item.appendChild(sakaiUserId);

			Node username = dom.createElement("username");
			try {
				User user = userDirectoryService.getUser(agf.getAgentId());
				String eid = user.getEid();
				username.appendChild( dom.createTextNode(eid) );

				Node firstName = dom.createElement("firstName");
				firstName.appendChild( dom.createTextNode(user.getFirstName()));
				item.appendChild(firstName);
				
				Node lastName = dom.createElement("lastName");
				lastName.appendChild( dom.createTextNode(user.getLastName()));
				item.appendChild(lastName);
			}
			catch (Exception ee) {
				username.appendChild( dom.createTextNode("nouser") );
			}
			item.appendChild(username);
			list.appendChild(item);
		}
	}
        catch (Exception e) {
		e.printStackTrace();
	}

	return Xml.writeDocumentToString(dom);
}


}
