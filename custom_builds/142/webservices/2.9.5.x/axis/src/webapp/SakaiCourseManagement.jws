import java.lang.String;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.*;

import com.rsmart.customer.integration.cm.CrossListingHelper;

import org.apache.axis.AxisFault;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.sakaiproject.authz.api.*;
import org.sakaiproject.component.cover.ComponentManager;
import org.sakaiproject.coursemanagement.api.*;
import org.sakaiproject.exception.IdUnusedException;
import org.sakaiproject.site.api.Group;
import org.sakaiproject.site.api.Site;
import org.sakaiproject.site.api.SiteService;
import org.sakaiproject.sitemanage.api.SiteInfoComposer;
import org.sakaiproject.tool.api.Session;
import org.sakaiproject.tool.api.SessionManager;
import org.sakaiproject.util.Xml;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import java.util.List;

/**
 * Created by IntelliJ IDEA.
 * User: jbush
 * Date: 9/19/11
 * Time: 10:21 AM
 * To change this template use File | Settings | File Templates.
 */
 
public class SakaiCourseManagement {
    private static final Log LOG = LogFactory.getLog(SakaiCourseManagement.class);

    protected CourseManagementService cmService;
    protected CourseManagementAdministration cmAdmin; 
    private SessionManager 		sessionManager;
    private SecurityService 	securityService;
    private AuthzGroupService authzGroupService;
    private SiteService siteService;
    private GroupProvider groupProvider;
    private SiteInfoComposer siteInfoComposer;
    private CrossListingHelper crossListingHelper;

    public SakaiCourseManagement() {
    	sessionManager = (SessionManager) ComponentManager.get(SessionManager.class.getName());
    	securityService = (SecurityService) ComponentManager.get(SecurityService.class.getName());
    	cmService = (CourseManagementService) ComponentManager.get(CourseManagementService.class.getName());
    	cmAdmin = (CourseManagementAdministration) ComponentManager.get(CourseManagementAdministration.class.getName());
        authzGroupService = (AuthzGroupService) ComponentManager.get(AuthzGroupService.class.getName());
        siteService = (SiteService) ComponentManager.get(SiteService.class.getName());
        groupProvider = (GroupProvider) ComponentManager.get(GroupProvider.class.getName());
        siteInfoComposer = (SiteInfoComposer) ComponentManager.get(SiteInfoComposer.class.getName());
        crossListingHelper = (CrossListingHelper) ComponentManager.get(CrossListingHelper.class.getName());
    }
    
    /**
	 * Get the Session related to the given sessionid
	 * @param sessionid		the id of the session to retrieve
	 * @return				the session, if it is active
	 * @throws AxisFault	if session is inactive
	 */
	private Session establishSession(String sessionid) throws AxisFault 
	{
		Session s = sessionManager.getSession(sessionid);
	
		if (s == null)
		{
			throw new AxisFault("Session \""+sessionid+"\" is not active");
		}
		s.setActive();
		sessionManager.setCurrentSession(s);
		return s;
	}


    public String getTermName(String sessionid, String termEid) throws AxisFault {  
        Session s = establishSession(sessionid);
        List<AcademicSession> academicSessions = cmService.getAcademicSessions();

         for(AcademicSession academicSession : academicSessions) {
            //we found a matching academicSession, success
            if (academicSession.getEid().equals(termEid)){
                return academicSession.getTitle();
            }
         }
        LOG.warn("can't find a matching term with eid=[" + termEid + "] check the sakai.properties files for proper term configuration");
        return null;

    }
    
	    
	public String getCurrentTerms(String sessionid) throws AxisFault
	{
		Session s = establishSession(sessionid);
		
		Document dom = Xml.createDocument();
	    Node list = dom.createElement("list");
	    dom.appendChild(list);
	    
		try
		{
			List academicSessions = cmService.getCurrentAcademicSessions();
			if(academicSessions != null && academicSessions.size() > 0 )
			{
				for (Iterator i=academicSessions.iterator(); i.hasNext();) 
				{
					AcademicSession as = (AcademicSession) i.next();
	                Node item = dom.createElement("academicSession");
	                Node eId = dom.createElement("eid");
	                eId.appendChild(dom.createTextNode(as.getEid()));
	                Node title = dom.createElement("title");
	                title.appendChild( dom.createTextNode(as.getTitle()) );
	                Node description = dom.createElement("description");
	                description.appendChild(dom.createTextNode(as.getDescription()));
	                Node startDate = dom.createElement("startDate");
	                startDate.appendChild(dom.createTextNode(as.getStartDate().toString()));
	                Node endDate = dom.createElement("endDate");
	                endDate.appendChild(dom.createTextNode(as.getEndDate().toString()));
                    Node sortOrder = dom.createElement("sortOrder");
                    sortOrder.appendChild(dom.createTextNode(as.getSortOrder().toString()));

	                item.appendChild(eId);
	                item.appendChild(title);
		            item.appendChild(description);
		            item.appendChild(startDate);
	                item.appendChild(endDate);
                    item.appendChild(sortOrder);
	                list.appendChild(item);
	            }
			}
			return Xml.writeDocumentToString(dom);
		}
		catch (Exception e) 
		{
			LOG.error("WS getTerms(): " + e.getClass().getName() + " : " + e.getMessage(), e);
			return null;
		}
	}
	
	public String getAllTerms(String sessionid) throws AxisFault
	{
		Session s = establishSession(sessionid);
		
		Document dom = Xml.createDocument();
	    Node list = dom.createElement("list");
	    dom.appendChild(list);
	    
		try
		{
			List academicSessions = cmService.getAcademicSessions();
			if(academicSessions != null && academicSessions.size() > 0 )
			{
				Date now = new Date();
				for (Iterator i=academicSessions.iterator(); i.hasNext();) 
				{
					AcademicSession as = (AcademicSession) i.next();
	                Node item = dom.createElement("academicSession");
	                Node eId = dom.createElement("eid");
	                eId.appendChild(dom.createTextNode(as.getEid()));
	                Node title = dom.createElement("title");
	                title.appendChild( dom.createTextNode(as.getTitle()) );
	                Node description = dom.createElement("description");
	                description.appendChild(dom.createTextNode(as.getDescription()));
	                Node current = dom.createElement("current");
	                current.appendChild(dom.createTextNode(String.valueOf(as.getStartDate().before(now) && as.getEndDate().after(now))));
	                Node startDate = dom.createElement("startDate");
	                startDate.appendChild(dom.createTextNode(as.getStartDate().toString()));
	                Node endDate = dom.createElement("endDate");
	                endDate.appendChild(dom.createTextNode(as.getEndDate().toString()));
	                item.appendChild(eId);
	                item.appendChild(title);
		            item.appendChild(description);
		            item.appendChild(current);
		            item.appendChild(startDate);
	                item.appendChild(endDate);
	                list.appendChild(item);
	            }
			}
			return Xml.writeDocumentToString(dom);
		}
		catch (Exception e) 
		{
			LOG.error("WS getAllTerms(): " + e.getClass().getName() + " : " + e.getMessage(), e);
			return null;
		}
	}
	
	public boolean deleteAcademicSession(String sessionid, String eid) throws AxisFault
	{
		Session s = establishSession(sessionid);
		if(!securityService.isSuperUser(s.getUserId()))
		{
			LOG.warn("NonSuperUser trying to delete academicSession: " + s.getUserId());
	    	throw new AxisFault("NonSuperUser trying to delete academicSession: " + s.getUserId());
		}
		try
		{
		    cmAdmin.removeAcademicSession(eid);
		    return true;
		}
		catch(Exception e)
		{
			LOG.error("WS deleteAcademicSession(): " + e.getClass().getName() + " : " + e.getMessage(), e);
			return false;
		}
	}

    public boolean updateSortOrderForAcademicSession(String sessionid, String eid, int sortOrder) throws AxisFault {
        Session s = establishSession(sessionid);
        try {
            AcademicSession as = cmService.getAcademicSession(eid);
            as.setSortOrder(sortOrder);
            cmAdmin.updateAcademicSession(as);
            return true;
        } catch (Exception e) {
            LOG.error("WS updateSortOrderForAcademicSession(): " + e.getClass().getName() + " : " + e.getMessage(), e);
            return false;
        }

    }

    public boolean saveAcademicSession(String sessionid, String eid, String title, String description, String startDate, String endDate) throws AxisFault
	{
	
		Session s = establishSession(sessionid);
		if(!securityService.isSuperUser(s.getUserId()))
		{
			LOG.warn("NonSuperUser trying to delete academicSession: " + s.getUserId());
	    	throw new AxisFault("NonSuperUser trying to delete academicSession: " + s.getUserId());
		}
		try
		{
	        DateFormat dateformat = new SimpleDateFormat("yyyy-MM-dd");
			AcademicSession as = cmAdmin.createAcademicSession(eid, title, description, dateformat.parse(startDate), 
				dateformat.parse(endDate));
			LOG.error("saved academic session" + as.getEid());
			setCurrentStatus(as);
			return true;                  
	                           
	    } 
	    catch (Exception e) 
		{
			LOG.error("WS saveAcademicSessions(): " + e.getClass().getName() + " : " + e.getMessage(), e);
			return false;
		}
	}
	
	public boolean updateAcademicSession(String sessionid, String eid, String title, String description, String startDate, String endDate) throws AxisFault
	{
	
		Session s = establishSession(sessionid);
		DateFormat dateformat = new SimpleDateFormat("yyyy-MM-dd");
		try
		{
			AcademicSession as = cmService.getAcademicSession(eid);
			as.setTitle(title);
			as.setDescription(description);
			as.setStartDate(dateformat.parse(startDate));
			as.setEndDate(dateformat.parse(endDate));
		    cmAdmin.updateAcademicSession(as);
		    setCurrentStatus(as);
			return true;
		}
		catch (Exception e) 
		{
			LOG.error("WS updateAcademicSessions(): " + e.getClass().getName() + " : " + e.getMessage(), e);
			return false;
		}
	}

    /**
     * return xml of sites found that have the section associated with the given sectionEid
     * @param sessionid
     * @param sectionEid
     * @return
     * @throws AxisFault
     */
    public String findExistingSitesForSection(String sessionid, String sectionEid) throws AxisFault {
        LOG.debug("findExistingSitesForSection(" + sectionEid + "," + sectionEid + ")");
        Session s = establishSession(sessionid);
        Set authzGroupIds = authzGroupService.getAuthzGroupIds(sectionEid);
        if (authzGroupIds == null || authzGroupIds.isEmpty()) {
            return null;
        }

        Document dom = Xml.createDocument();
        Node list = dom.createElement("list");
        dom.appendChild(list);

        for (Object siteRef : authzGroupIds) {
            String siteId = ((String) siteRef).replaceFirst("/site/", "");
            try {
                Site site = siteService.getSite(siteId);
                if (site != null) {
                    Node item = dom.createElement("site");
                    Node siteIdNode = dom.createElement("siteId");
                    siteIdNode.appendChild(dom.createTextNode(site.getId()));
                    Node siteTitle = dom.createElement("siteTitle");
                    siteTitle.appendChild(dom.createTextNode(site.getTitle()));
                    item.appendChild(siteIdNode);
                    item.appendChild(siteTitle);
                    if (site.getProperties() != null) {
                        for (Iterator j = site.getProperties().getPropertyNames(); j.hasNext(); ) {
                            String name = (String) j.next();
                            Node siteProperty = dom.createElement(name);
                            siteProperty.appendChild(dom.createTextNode((String) site.getProperties().get(name)));
                            item.appendChild(siteProperty);
                        }
                    }
                    list.appendChild(item);
                }
            } catch (IdUnusedException e) {
                LOG.debug(siteId + " is not a siteId, which means its probably a group, ignoring");
            }
        }

        return Xml.writeDocumentToString(dom);

    }

	private void setCurrentStatus(AcademicSession session) throws AxisFault
	{
		try
		{
		    List<AcademicSession> currentSessions = cmService.getCurrentAcademicSessions();
		    List<String> currentTerms = new ArrayList<String>();
		
		   // initialize the array with the current sessions
		   for (AcademicSession s: currentSessions) {
		            currentTerms.add(s.getEid());
		    }
		
		       // add this session if its end date is after today
		    if (session.getEndDate().after(new Date())) {
		           if (!currentTerms.contains(session.getEid().toString())) {
		                   currentTerms.add(session.getEid());
		           }
		    // otherwise remove this session
		    } else {
		        if (currentTerms.contains(session.getEid().toString())) {
		                currentTerms.remove(session.getEid().toString());
		        }
		    }
	                              	   
	    	cmAdmin.setCurrentAcademicSessions(currentTerms);
	    }
	    catch (Exception e) 
		{
			LOG.error("WS setCurrentStatus(): " + e.getClass().getName() + " : " + e.getMessage(), e);
		}
	}

    public String updateSiteTitle(String sessionid, String siteId) throws AxisFault {
        LOG.debug("updateSiteTitle(" + sessionid + "," + siteId + ")");
        Session s = establishSession(sessionid);
        try {
            Site site = siteService.getSite(siteId);
            siteInfoComposer.updateSiteTitle(site);
            return site.getTitle();
        } catch (IdUnusedException e) {
            LOG.debug("can't find site with id:" + siteId);
            return "site not found";
        }
    }
    
    
    public String addSectionToSite(String sessionid, String sectionEid, String siteId) throws AxisFault {
        LOG.debug("addSectionToSite(" + sessionid + "," + sectionEid + "," + siteId + ")");
        Session s = establishSession(sessionid);

        try {
            String realm = siteService.siteReference(siteId);
            AuthzGroup realmEdit = authzGroupService.getAuthzGroup(realm);
            String providerRealm = addToExternalRealm(sectionEid, StringUtils.trimToNull(realmEdit.getProviderGroupId()));
            realmEdit.setProviderGroupId(providerRealm);
            authzGroupService.save(realmEdit);
        } catch (Exception e) {
            throw new AxisFault("", e);
        }

        return "success";
    }

    public String getProviders(String sessionid, String siteid) throws AxisFault {
        LOG.debug("getProviders(" + sessionid + "," + siteid + ")");
        Session s = establishSession(sessionid);

		Document dom = Xml.createDocument();
	    Node providersNode = dom.createElement("providers");
	    dom.appendChild(providersNode);
	    
        try {
            String site = siteService.siteReference(siteid);
            Set<String> providers = authzGroupService.getProviderIds(site);
            
            for (String provider : providers) {
            	Node node = dom.createElement("provider");
				node.appendChild(dom.createTextNode(provider));
				providersNode.appendChild(node);
			}
            
            return Xml.writeDocumentToString(dom);
        } catch (Exception e) {
    			LOG.error("WS getProviders(): " + e.getClass().getName() + " : " + e.getMessage(), e);
    			return null;
    	}   
    }
    
    public String getSection(String sessionid, String sectionEid) throws AxisFault {
     Session s = establishSession(sessionid);
		
		Document dom = Xml.createDocument();
	    Node sectionNode = dom.createElement("section");
	    dom.appendChild(sectionNode);
	    
		try
		{
            if (cmService.isSectionDefined(sectionEid)) {
			    Section section = cmService.getSection(sectionEid);
                Node eid = dom.createElement("eid");
                eid.appendChild(dom.createTextNode(section.getEid()));
                sectionNode.appendChild(eid);
                Node title = dom.createElement("title");
                title.appendChild(dom.createTextNode(section.getTitle()));
                sectionNode.appendChild(title);
                Node description = dom.createElement("description");
                description.appendChild(dom.createTextNode(section.getDescription()));
                sectionNode.appendChild(description);
                Node courseOfferingEid = dom.createElement("courseOfferingEid");
                courseOfferingEid.appendChild(dom.createTextNode(section.getCourseOfferingEid()));
                sectionNode.appendChild(courseOfferingEid);
                Node category = dom.createElement("category");
                category.appendChild(dom.createTextNode(section.getCategory()));
                sectionNode.appendChild(category);
                Node maxSize = dom.createElement("maxSize");
                maxSize.appendChild(dom.createTextNode(String.valueOf(section.getMaxSize())));
                sectionNode.appendChild(maxSize);
                Node authority = dom.createElement("authority");
                authority.appendChild(dom.createTextNode(String.valueOf(section.getAuthority())));
                sectionNode.appendChild(authority);


                sectionNode.appendChild(getCourseOfferingNode(section.getCourseOfferingEid(), dom));

            } 
					
			return Xml.writeDocumentToString(dom);
		}
		catch (Exception e) 
		{
			LOG.error("WS getSection(): " + e.getClass().getName() + " : " + e.getMessage(), e);
			return null;
		}   
    }

    private String getCrossListId(String eid) {
        return crossListingHelper.getCrossListingId(eid);
    }

    private Node getCourseOfferingNode(String courseOfferingEid, Document dom) {
        Node coNode = dom.createElement("courseOffering");

        if (cmService.isCourseOfferingDefined(courseOfferingEid)) {
            CourseOffering co = cmService.getCourseOffering(courseOfferingEid);
            Node eid = dom.createElement("eid");
            eid.appendChild(dom.createTextNode(co.getEid()));
            coNode.appendChild(eid);
            Node title = dom.createElement("title");
            title.appendChild(dom.createTextNode(co.getTitle()));
            coNode.appendChild(title);
            Node description = dom.createElement("description");
            title.appendChild(dom.createTextNode(co.getDescription()));
            coNode.appendChild(description);
            Node endDate = dom.createElement("endDate");
            endDate.appendChild(dom.createTextNode(String.valueOf(co.getEndDate().toString())));
            coNode.appendChild(endDate);
            Node startDate = dom.createElement("startDate");
            startDate.appendChild(dom.createTextNode(String.valueOf(co.getStartDate().toString())));
            coNode.appendChild(startDate);
            coNode.appendChild(getTermNode(co.getAcademicSession(), dom));
            Node crossListing = dom.createElement("crossListing");
            crossListing.appendChild(dom.createTextNode(getCrossListId(courseOfferingEid)));
            coNode.appendChild(crossListing);

        }
        return coNode;
    }

    protected Node getTermNode(AcademicSession term, Document dom) {
        Date now = new Date();
        Node item = dom.createElement("academicSession");
        Node eId = dom.createElement("eid");
        eId.appendChild(dom.createTextNode(term.getEid()));
        Node title = dom.createElement("title");
        title.appendChild(dom.createTextNode(term.getTitle()));
        Node description = dom.createElement("description");
        description.appendChild(dom.createTextNode(term.getDescription()));
        Node current = dom.createElement("current");
        current.appendChild(dom.createTextNode(String.valueOf(term.getStartDate().before(now) && term.getEndDate().after(now))));
        Node startDate = dom.createElement("startDate");
        startDate.appendChild(dom.createTextNode(term.getStartDate().toString()));
        Node endDate = dom.createElement("endDate");
        endDate.appendChild(dom.createTextNode(term.getEndDate().toString()));
        item.appendChild(eId);
        item.appendChild(title);
        item.appendChild(description);
        item.appendChild(current);
        item.appendChild(startDate);
        item.appendChild(endDate);
        return item;
    }

    public String deleteSectionFromSite(String sessionid, String sectionEid, String siteId) throws AxisFault {
        LOG.debug("deleteSectionFromSite(" + sectionEid + "," + sectionEid + "," + siteId + ")");
        Session s = establishSession(sessionid);

        try {
            //String realm = siteService.siteReference(siteId);
            //AuthzGroup realmEdit = authzGroupService.getAuthzGroup(realm);
            //String providerRealm = removeFromExternalRealm(sectionEid, StringUtils.trimToNull(realmEdit.getProviderGroupId()));
            //realmEdit.setProviderGroupId(providerRealm);
            //authzGroupService.save(realmEdit);
            Site site = siteService.getSite(siteId);
            for (Group group : site.getGroups()) {
                if (group.getId().equals(sectionEid)) {
                    site.removeGroup(group);
                }
            }
            siteService.save(site);

        } catch (Exception e) {
            throw new AxisFault("", e);
        }

        return "success";
    }

    private String removeFromExternalRealm(String sectionEid, String existingProviderIdString) {
        return buildExternalRealm(sectionEid, existingProviderIdString, false);
    }

    private String addToExternalRealm(String sectionEid, String existingProviderIdString) {
        return buildExternalRealm(sectionEid, existingProviderIdString, true);
    }


	private String buildExternalRealm(String sectionEid, String existingProviderIdString, boolean add) {

		List<String> allProviderIdList = new ArrayList<String>();

		if (existingProviderIdString != null)
		{
			allProviderIdList.addAll(Arrays.asList(groupProvider.unpackId(existingProviderIdString)));
		}

		// update the list with newly added provider
        if (add) {
		    allProviderIdList.add(sectionEid);
        } else {
            allProviderIdList.remove(sectionEid);
        }

		if (allProviderIdList == null || allProviderIdList.size() == 0)
			return null;

		String[] providers = new String[allProviderIdList.size()];
		providers = (String[]) allProviderIdList.toArray(providers);

		String providerId = groupProvider.packId(providers);
		return providerId;

	} // buildExternalRealm

}