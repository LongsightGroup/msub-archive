Index: server/src/java/org/sakaiproject/gradebook/entity/Gradebook2EntityProducerTransferAgent.java
===================================================================
--- server/src/java/org/sakaiproject/gradebook/entity/Gradebook2EntityProducerTransferAgent.java	(revision 86616)
+++ server/src/java/org/sakaiproject/gradebook/entity/Gradebook2EntityProducerTransferAgent.java	(working copy)
@@ -316,7 +316,7 @@
 		ignore.add(BusinessLogicCode.CannotIncludeItemFromUnincludedCategoryRule);
 		
 		try {
-			componentService.saveFullGradebookFromClientModel(toGB);
+			componentService.saveFullGradebookFromClientModel(toGB, to);
 		} catch (FatalException e) {
 			log.error("transferCopyEntities(migrate) - from: " + from + " - to: " + to);
 			e.printStackTrace();
Index: server/src/java/org/sakaiproject/gradebook/gwt/sakai/Gradebook2ComponentServiceImpl.java
===================================================================
--- server/src/java/org/sakaiproject/gradebook/gwt/sakai/Gradebook2ComponentServiceImpl.java	(revision 86616)
+++ server/src/java/org/sakaiproject/gradebook/gwt/sakai/Gradebook2ComponentServiceImpl.java	(working copy)
@@ -281,6 +281,7 @@
 	private SiteService siteService;
 	private ToolManager toolManager;	
 	private UserDirectoryService userService;
+	private String currentSiteId;
 	
 	/*
 	 * GRBK-824 : Adding class member that is only set during init via sakai properties.
@@ -4391,7 +4392,7 @@
 
 		Site s = null;
 		try {
-			s = siteService.getSite(toolManager.getCurrentPlacement().getContext());
+			s = siteService.getSite(getSiteContext());
 		} catch (IdUnusedException e) {
 			log.error("current site not found trying store '" + ActionType.GRADED.name() + "' actionrecord");
 
@@ -4715,6 +4716,7 @@
 	private org.sakaiproject.gradebook.gwt.client.model.Gradebook createGradebookModel(Gradebook gradebook, List<Assignment> assignments, List<Category> categories, boolean isNewGradebook) {
 
 		log.debug("createGradebookModel() called"); 
+		setSiteContext(gradebook.getUid());
 		Site site = null;
 
 		if (siteService != null) {
@@ -6126,13 +6128,25 @@
 
 		return site;
 	}
+	
+	/*
+	 * GRBK-1441: set the site id so it can be used later.
+	 * This is used when the import from site occurs in a separate thread.
+	 */
+	private void setSiteContext(String currentSiteId) {
+		this.currentSiteId = currentSiteId;
+	}
 
 	private String getSiteContext() {
 
 		if (toolManager == null)
 			return AppConstants.TEST_SITE_CONTEXT_ID;
+		
+		Placement placement = toolManager.getCurrentPlacement();
+		if (placement != null) 
+			return placement.getContext();
 
-		return toolManager.getCurrentPlacement().getContext();
+		return currentSiteId;
 	}
 
 	private String getSiteId() {
@@ -7024,16 +7038,18 @@
 	}	
 
 	public void saveFullGradebookFromClientModel (
-			org.sakaiproject.gradebook.gwt.client.model.Gradebook newGradebook) 
+			org.sakaiproject.gradebook.gwt.client.model.Gradebook newGradebook, String newSiteId) 
 	throws FatalException, InvalidInputException {
 
 		if(!(newGradebook instanceof GradebookImpl)) {
 			throw new FatalException("Expected Gradebook implementation of type: " + GradebookImpl.class.getName());
 		}
+		
+		// GRBK-1441: if we have a newSiteId, set it for later use
+		setSiteContext(newSiteId);
 
+		Gradebook current = gbService.getGradebook(getSiteContext());
 
-		Gradebook current = gbService.getGradebook(toolManager.getCurrentPlacement().getContext());
-
 		GradeItem itemModel = (GradeItem) newGradebook.getGradebookItemModel();	
 
 		handleImportItemModification(current.getUid(), current.getId(), itemModel, new HashMap<String, Assignment>(), null);
Index: api/src/java/org/sakaiproject/gradebook/gwt/sakai/Gradebook2ComponentService.java
===================================================================
--- api/src/java/org/sakaiproject/gradebook/gwt/sakai/Gradebook2ComponentService.java	(revision 86616)
+++ api/src/java/org/sakaiproject/gradebook/gwt/sakai/Gradebook2ComponentService.java	(working copy)
@@ -139,7 +139,7 @@
 	
 	public Upload upload(String gradebookUid, Long gradebookId, Upload upload, boolean isDryRun) throws InvalidInputException;
 	
-	public void saveFullGradebookFromClientModel(Gradebook newGradebook) throws FatalException, InvalidInputException;
+	public void saveFullGradebookFromClientModel(Gradebook newGradebook, String newSiteId) throws FatalException, InvalidInputException;
 	
 	public Upload upload(String gradebookUid, Long gradebookId,
 			Upload upload, boolean isDryRun,
